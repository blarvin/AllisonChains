1.	Executive Summary
2.	Detailed Description and Feature List
3.	Usage Examples




Super

META: 
⦁	If at any time you lose track of what this is; just tell yourself it is a “web clipper and bookmark organizer”. It is actually closely akin to Pinterest…

⦁	It isn’t exactly a SPREADSHEET application, but anything that people will do with this new thing, can probably be done with MS Excel, given enough skill and time.

⦁	It is a mass market consumer product. Designed for absolutely everyone on the internet. Five-year-olds can use it. Your grandmother can use it. Rigorously organized NASA-level research programs can use it too.



The big idea: 

1.) A Web Clipper and Clipping Organization Tool. 

1.) Search/Find
2.) Clip/Scrape/Parse
3.) Organize/Format/Annotate/Structure
4.) Present/Output/Use

1.) A set of Flags which can be appended to a search. Things like;
Shop which would compare prices, product which would compare features and specifications of products, info for finding general info, academic for finding scholarly works, people which would help you compare specific people, bio which would help compare info on notable people. As an internet user, so that I can be specific about my goals, I can enter any of a finite number of flags along with my search. … As a search engine user, so that I can limit the results of a search, I can enter a finite number of purpose flags  along with my search. … As a user of purpose flags who hasn’t memorized all the available flags, so that I can use flags without remembering them, I can choose from a menu of flags and see them appear in the search form.

2.) Saved searches, or something a bit like saved searches... Actually a Saved Document which has search terms associated with it. Whenever the user specifies, the document can "resend" the search terms to the search engine (in order to continue working on the document or update it.). The set of search terms can be edited at any time, but they stay with the document. As an internet user with more than a momentary passing interest in something, so that I can continue learning about something I am interested in, I can revisit a search that I have done before.

3.) Search Filtering...  To create the Filters, the user simply promotes a search result (by UTILIZING the link), demotes a search result (with a single click next to it in the browser), or suppresses a search result (with a click next to it in the browser) ... (Promotion/Demotion/Suppression history is also saved with the document of course, and can be viewed and undone later.) Promoting a search result by UTILIZATION means the result will be promoted based on the Utilization algorithm: Clicking through the link of a result is just the beginning of utilization. How, and how much, the user interacts with the website (or other resource) that the result led to determines utilization, based on many factors. Ultimately, how much information is clipped from the resource and put into the document (utilized), determines where in the search results list a given result is promoted to. As an internet user, so that I don’t have to wade through unwanted search results multiple times, my tools recognize which search results are best for ME in the context of a given search and move them up the list of results. As an internet user, so that I don’t have to see unwanted search results multiple times, I can tell my tools which results I do not want to see in the context of a given search. As an internet user, so that I can train my tools about what search results are good/bad in the context of a given search, I can click on ‘demote’, ‘promote’, and ‘suppress’ buttons.

3.) An intelligent web clipper... Once you have found INFORMATION that you were looking for, (by running a SEARCH, and by following the SEARCH RESULTS to a RESOURCE in which the INFORMATION resided) ... Now what you want is to save the INFORMATION itself to your Document... The Intelligent Web Clipper helps you do this. As an internet user, so that I can really learn from what I find on the internet, I can copy/paste and drag/drop and use other methods to bring information from the internet into a program that will help me store and organize it. EPIC

For example: You are on a website selling Bitzles and you highlight a product's price (with dollar symbol), name, weight, part number, and rating. You then drag this information over to the Document. The Intelligent web clipper recognizes these as 5 distinct pieces of information related (by proximity on the website) to a single product. So it passes them to the Document and the Document creates 5 Columns in a Table, and places each piece of information in a separate Cell in a new Row in the Table. If the Wizard recognizes (from direct programming, or from the experiences of its fellow Wizards on the WWW, or in the case of an existing table, by similarity to data in other cells) that the data with the dollar sign is a "Price" and the that the name is a "Product Name", then the Document can create its own Column Header Cells with those Titles. As an online shopper, so that I can compare products, I can select multiple pieces of info related to a product and simply drag it into my document. As a consumer, so that I can compare products I am interested in, I can select information about a product from a website and drag it into a document. As a user, who doesn’t want to type out information that I just found already, my document can intelligently parse the information into columns.

If the Wizard does not recognize a piece of information, it will then bring the cursor to the associated Column Heading Cell, and a prompt will ask you to give it a Heading Title. Wizards in this situation (parsing data into multiple places) should highlight all the cells in a special color that need user verification, and then take the user to those cells one by one. If it was really fucking smart: If I create a new column and header shortly after bringing in new data, the wizard would GO BACK to the web on its own (in the background) and try to find data to fill that new column. As a user, who doesn’t want to correct the intelligent parser after it has already made a mistake, my program will prompt me for input if it doesn’t know what column to create.

If you are dragging information into an existing table with existing column headings, the Intelligent Web Clipper will try to use parsing algorithms to add the data to the appropriate columns... For instance, when dragging in a new product to compare in a product comparison grid, a new row is created, the IWC parses the data into cells such as "price" and "weight"... In this case you should drag the selected data from your web browser to the Header Cell or a new gap of the existing table (so it knows it is NEW), then a new row is created. After creating the new row, the IWC first parses the pieces you dragged in into cells in columns in the new row. Then the wizard searches the Web Page you are on for other data to fill in columns in that row that you left unfilled. It also launches other tabs in your browser, to 1.) redundantly verify the information, and 2.) fill in cells in the row that you left unfilled (cells with new data automatically added by the IWC are highlighted red, you click a "Verify" menu item in the red cell, and you are taken to the browser tab, and to the data on the webpage, so you can confirm the IWC got it right. If possible, the best workflow for this would be: mouse-over the menu item in a red cell "VERIFY" for 0.5 seconds, and a mini-browser window appears as a pop up, over the SuperDoc, right below the cell in question, with the website displayed and the cell's source data highlighted, the mouse scroll-wheel scrolls the website, the user can see at a glance that the data is correct, and all the while the mouse pointer is hovering over the "Verify" button, then the user clicks "Verify", the mini-browser popup disappears, and the cell background turns white. ) As a user, so that I can get my information JUST RIGHT, I am prompted to verify any information added to my document by the program.

If you are dragging-in data to add to an existing ROW, you should drag it to the row's heading. Then the data is added to cells in the appropriate columns which match the incoming data. As an internet user, I want to drop new data into a row’s header and let the parser sort it into the correct columns, so that I don’t have to drag in each data piece into each cell.
As a user, when I drag in a webpage by its favicon, the app should then scope the result to the portion of the site I am actually looking at… otherwise I will have to scope it manually. And If I drag it into the Doc header, and it is a parseable object or set of objects (such as a comparison grid), then the things should be put into multiple cells, rows, columns. As appropriate. Inelligently. 

In all of the above, note that you may be dragging (or pasting) a single data point targeting a single cell by highlighting a string, or you may drag-in multiple data points by CTRL-highlighting multiple strings. As an internet user with a mouse and a keyboard, I want to CTTRL-highlight pieces of text and images, so that I can add multiple pieces of data at once to my document,

Also, in many cases, you can highlight and then copy or drag whole blocks of info, and the IWC will parse out the wanted information based on other columns in your table. With many websites, you will be able to simply drag the Favicon or the little globe icon into a row, column, or table header. This will work particularly well on a webpage that is specifically displaying information on a single item or category, and on webpages displaying a specific product comparison list/grid. As a user who has already built up an organizational system in a document, I want to drag in large chunks of a page or the favicon and let the parser sort it out, so that I don’t have to repeat myself.




IPWIC -Intelligent Parsing Web Information Clipper

Gamification of Reductionized Crowdsourceable Processes: i.e. "Folding @ Home" (a protein-folding "game").

Reductionized Distributed Functions, i.e. the Captcha, highly reductionized, but not gamified.

Openization of Necessarily Closed Functions: This is normally done for some debugging functions, to whit, those opt-in "Error and Usage Statistics Reporting" requests you get in your desktop apps. We will turn this idea into a major part of our operations. And remember, Curated Crowdsourcing, not Wide-Open Opensourcing.

With Google, you don’t get to choose when the search engine will come up with an "instant answers" result. You just have to enter the "right" kind of search, and hope it works... As a search engine user, I want to tell the search engine exactly what kind of KNOWLEDGE I am seeking, so that the search engine performs the right functions and doesn’t give me a load of shit. 

>>> Refind, a social bookmarking app
>>> Yelp Knowledge https://www.yelp.com/knowledge
>>> Scale (a lot like AMT)
>>> Smart Draw (Can we use this as part of our Backend? ... To draw various Views and Outputs)


How it works:

You run the (flagged) search.
You see a typical Search results page. This is filtered to offer what you need, and not what you don’t need.
You browse through the websites looking for the stuff you wanted.
When you find something you are interested in, you click on it. Duh.
Super attempts to grab data to populate a flag-related spreadsheet (a Supe) in your Super account. You get to help guide this info-grabbing process.
Whenever you want, you can compare and peruse your Supes. Keep it open in another tab while you Super and surf. They are automatically saved. You can restart a Supe later just by clicking the title. (the title says TERM:flag) You can also add to a Supe by dragging and dropping and cut and paste from other windows and websites, even from your own PC, and from other apps. 
A Supe is essentially a spreadsheet or database, which can be presented in a number of forms. 
Each Model of Supe has its associated Wizards, which provide help with relevant Web Scraping, Parsing, Filling, Organization, Tagging, AI operations on the DATA, Algorithm creation assistance, Updating, 



Search. This can be initiated from the app, which accesses the user-selected search engine, and opens the default browser, and opens hits in tabs.  Or you can just start a search from your web browser as you normally do, it doesn’t matter. Somehow, the app just has to be aware of the search terms in use for a given Supe… It uses those search terms in conjunction with the Model filters. 
Find. When the user finds relevant “stuff” on the internet, they drag it into the app… or hit a hotkey with the item highlighted or “clipped”
Recognize. The app recognizes patterns or commonalities in the data being dragged in, and immediately opens one or more wizards to try to create rows and columns for the data. The user can drag the rows and columns around, swap one for another (row to column, column to row), close them, suggest new headings from within the wizards, select from suggested headings from a menu of same provided within the wizard, select add or search for topic and flag words from within the wizard, select a metatype for the Supe, select a pre-structured Supe made by someone else, all to guide the wizard into creating the right Supe…
Create. Now the Supe is open and the wizard is closed. The user drags data from the internet into it. After one cell is filled by the user, the AIs recognize and search for similar data on another website. Now, all you have to do is open a website, the same hotkey used to “import” selected items, now scrapes the website for the same kinds of items.
Analysis and updating. This is an ongoing phase, where algorithms are applied across the data cells, if desired, for analysis. Also, the user may want to update data, by having the Supe check online for new content.
Output: To each type of Supe, one or more types of output are available to auto-generate. Tables and Text, Wiki Article, Bifurcated Decision/Identification/Diagnostic Chart, Flowchart, Circuit Diagram, Formatted Recipe, Step-By-Step, Graphs and Charts, Tree, Presentation

Scrape/Clip/Parse/Fill: the work of an ExoWizard... Using PAT as an example: All the user should have to do is drag the URL or favicon (of a page displaying a single patent listing) from the browser into a SuperDoc... Or just type/paste a patent number into a new Row in the SuperDoc. The wizard will then scrape the page for relevant data to fill in cells in the new Row.... Date of application, Date of issue, Drawings, Claims, Inventor Name, Assignee, Etc...  

Specific Models of Supes: These “Models” are also the very same “FLAGS” run during the search phase…

In all cases these "Models" below are just special cases of the more general "Types".
As users create new SuperDocs not from these Models, but from the general Types, we will co-opt common/similar units to create a new Model. We will give the users tools to create new Wizards for these models, and tools to implement new algorithms for the Wizards to use... and then we will co-opt those as well.

These models are known by the names of their Wizards. More than one Wizard may be associated with a given Model, and each Wizard may come into play according to their own criteria or rules. Also there are Apprentices, (i.e.  sub-wizards), and Bots which each have their own name, and perform specific finite tasks, (such as updating a cell, or creating a bibliographic citation.) These are available individually, apart from their Models, for users to use in creating new SuperDocs and new Models.

MODELS:
1.	Patent Supe “PAT”
o	Helps you sort by relevance
2.	Maker Supe “MAKE”
o	Helps you create a “recipe” of parts and steps
o	Helps you source the parts, list and compare alternatives
o	Helps you arrange the steps
3.	What to Watch? “WATCH”
o	Helps you build a “Recommendation Engine” for movies 
o	Helps you organize movies you have seen, haven’t seen, and etc.
o	Helps you discover new movies
o	Helps you implement pattern recognition algorithms across the database of movies to find What to Watch
4.	Recipe Supe “COOK”
o	Compare recipes for the “same” or similar dishes
o	Link to related dishes
5.	Shopping Supe “SHOP”
o	Obviously, helps you create a table comparing products and/ or prices
6.	Science Supes “SCI”
o	Helps you do real science!
o	Collect, organize, collate, document, annotate your DATA
o	Custom Wizards for various types of data gathering, such as Data Loggers, Field Recordings, 
7.	Image Supe “PIC”
o	Compare and collect images
o	Run algorithms across the collection
8.	Pop Culture Supe “POP”
o	Compare who is hot, trending, scandalous etc.
9.	Re-Search Supe: (The METASupe) “RE”
o	Helps you compare the reports and research of others
10. Affiliation: For finding/showing associations between Companies, Organizations, Brands, even People
11. News Cyclops:
12. Veracity Truth:
13. Periodic Table of Whatever
14. Assembly: For mechanical things, such as cars... Wizard helps you group things into a hierarchy, much like a tree structure, of subassemblies, parts, subsystems, etc. Has associated EXPLODED VIEWS: help create 3D PDF
15. Sports Bracket: (forward or backward... predictive or recording)
16. Family Tree
17. Species Tree
18. Concordex
19. TimeLine/ TimeRibbon
20. DockStack
21. TechStack
22. Cast (for movies/plays/shows)
23. Career (job search)
24. Org (people and their roles)
25. Plot (for writing)
26. StoryBoard
27. Defence (legal)
28. Law
29. Suit (Civil Law)
30. QNA (Organize questions (and their forms) and their answers (and their forms))
31. Mech (specialized version of Assembly, for machines)
32. Electrician
33. Electronic
34. OpticBench
35. Architecture
36.Vessel
37. Mappy (GIS)
38. Restaurant (business)
39. SmallBizWiz
40. ModelFax (like CarFax, but for anything)
41. Localist (like Angie's List, but for anything. Leave ratings and feedback for local businesses.)
42. MetaModel (organize/find Viats)
43. Estate (real estate)
44. Employ (Rate employers)
45. Employee (rate employees)
46. Recruit (compare candidates, resumes)
47. Regs (laws and regulations)
48. Proposed Policy and Regulation
49. Politic (platform, position, people)
50. Candidate
51. Elections/Measures of the World (with Geo, Timeline, and Grid forms)
Help me track elections/votes/governmental measures/policies around the world that are upcoming, and let me put in simple criteria for outcome shift such as ‘right/left’, ‘conservative/liberal’, ‘populist/aristocratic’, ‘labor/capital’, ‘nationalist/globalist’, ‘socialist/liberal’, ‘socialist/capitalist’, or whatever axes of comparison you like of course (these are some suggestions; you have to do the work yourself of rating a measure on any given axis) In each measure, for each potential choice, I can add axes (which appear as slider controls) and set the position along the axis as I see it. (For this to SHOW shift, wouldn’t it be necessary to rate ‘the status quo’ (i.e the existing policy/party) on the very same axes, before a measure comes into force? This could get confusing, as it may not be clear which part of the establishment represents the status quo on this specific idea. A person? A party? A law? A non-official policy? The entire establishment? If it is the entire establishment I rate, then what is the magnitude of the effect from the new change?)
52. Movement/Sociopolitical ideological/ sociophilosophical grouping: 
One of the most difficult tasks in understanding the world is characterizing/defining/delimiting a “group” or “movement” of people. What is Humanism? Where does liberalism end and leftism begin? How does thought system X compare to thought system Y? Some kind of multi-dimensional fuzzy blobspace?


FORMS:
1. Grid
2. NodeNet, NodeCloud
3. BlobSpace (Venny McVennface)
4. Tree/Hierarchy
5. TimeLine/TimeRibbon
6. Charts (circuit diagram, flowchart, etc.


Menus: File, Edit, Annotate, Design, View, Share

Each FUNDAMENTAL FORM has its own associated characteristic OUTPUTS, BOTS, WIZARDS, ALGORITHMS, and STRUCTURES... BOTS fetch and update


GLOSSARY/LEXICON/FEATURE LIST:


	DATA, METADATA, FORMS, MODELS, WIZARDS, APPRENTICES, OUTPUTS, STRUCTURES, VIEWS/SIGHTS, FORMATS, DOMAINS, PRECISION, PROXY, DOCUMENT STYLES, CELL STYLES, BOTS/SPIDERS, ALGORITHMS, APIs,

TAGS: words or phrases associated with a clipping (data), that a user adds to make that data easier to find, classify it, associate it with other data or ideas, or simply describe it. HASHTAGS (#) should be used for phrases the user intends as a meme or main theme or new idea, or for pre-existing internet memes. single words (not cas sensitive, seperated by commas if multiple) should be used for general descriptors, categorizers, and classifiers.

CLASSIFICATION: special coded tags that assign data to a classification based on pre-determined systems, such as the Dewey Decimal System, etc.

MARKUP: special "markup tags" defined by specific markup languages, such as HTML and WIKI Markup. These provide many functions.

CONTEXT SENSITIVE: many functions in the User Interface depend on Context; for instance, the items available in a Cell's Menu will depend on what type of data is in the Cell. Likewise, the Controls appearing in a cell will depend on the Data in that Cell. The options for Formatting Data in a Cell may depend on what Meta Data is selected or added in the Column Heading for the Column whither that Cell may be. Also; CONTEXT, DEPENDING ON CONTEXT, RESPECTIVE OF CONTEXT... 

DATA is anything PUT INTO a cell of a table. There are many data types, numbers of various formats, picture files of various formats, hyperlinks, word, sentence, paragraph, comma separated strings, audio files of various formats, video, output from other cells or APIs. or feeds.

METADOCS or MULTI-LEVEL SUPERDOCS: Are SuperDocs embedded in Superdocs. This could be quite common. Respective of Context, there will sometimes be a Menu Item "Drill Down" in a Cell, when this cell holds either an entire SuperDoc or an Input from another SuperDoc. 

Likewise, in the Header Cell or Output Cell, or Row Heading Cell of a SuperDoc, there will be a Menu Item "Up One Level",  which will bring you to the SuperDoc which uses the current one as a source... 

??Will there need to be a MAP SuperDoc which shows and navigates the heirerarchy??

For example: "Surviving the Zombie Apocalypse" (with Rows for Vehicles, Backpacks, Weapons, Foods, Medical Equipment, Dietary Supplements, Clothing, Shelter, Communications) >>"Dietary Supplements (with Rows for Vit A, Vit B, Vit C, Vit D, Vit E, Multi X, Multi Y Multi Z, Nootropics, Fibers, Stimulants, Teas, Probiotics, Calcium, Mag, Zinc, Iron) >> Vitamin D (with Rows for Source 1, Source 2, Source 3, Form 1, Form 2, Form 3, Product 1, Product 2, Product 3, Product 4)

EXPORT/ OUTPUT:

PAPERSPACE:

PRESENTATION, SLIDESHOW: A type of export.

INPUT: A specific interaction.

FEED: Some “live” or rapidly changing information.

OPENWORK: Work that the community donates (their time, effort, expertise, and reductionized human intelligence) to improving our services, particularly by maintaining "Openness" and "Transparency". We will set up programs to incentivize Openwork. Rewards could be; Premium features and upgrades, Easter eggs, Status Symbols (such as "badges" and "Titles" on their account profiles or avatars), Real World Easter eggs (Cash, Gifts, invites to Company events), special Account privileges... This concept even applies to Institutional Licenses.

DISTRIBUCYCLES/ DISTROWORK

OPENIZATION: The underlying, normally secret processes, are open to criticism and improvement suggestions from the community. This includes Security, Encryption, Anonymity, Distribution (such as routing algorithms). Openizing normally secretive processes reassures and ensures customer confidence and trust.

CROWDWORK: Work that the community donates (their time, effort, expertise, and reductionized human intelligence) to improving our services on all fronts (openness, security, anonymity, privacy, encryption, debugging/beta testing, feature requests, error reporting, usage reporting, forum moderators, forum Q&A posting, Template authoring, content authoring, trustification, social annotation, flagging, classifying,    We will set up programs to incentivize Crowdwork. Rewards could be; Premium features and upgrades, Easter eggs, Status Symbols (such as "badges" and "Titles" on their account profiles or avatars), Real World Easter eggs (Cash, Gifts, invites to Company events), special Account privileges... This concept even applies to Institutional licenses.

Generally speaking, all Crowdwork is redundantly verified. This means it is of high quality, accurate, and free from vandalism. 


VALUIZATION >FREEMIUM INCENTIVE >DISTRIBUTED COMPUTATION: We can use this to build distributed P2P UNSERVERS, and plenty of computing power to run highly sophisticated processes such as "deep learning" pattern recognition on data and metadata.

Offer our DISTROWORKERS 1.) A cool Linux OS build which actually speeds up their computer. 2.) Open protocols. 3.) Onion Routing 4.) Premium Account Advantages. 

SCOPE a Cell:

The main reason to SCOPE a cell is to select (ie “clip”) the “sight”, portion, region, or subset of the data which is to appear in the normal minimized state of the cell. Scoping is also useful for reviewing the underlying data, selecting portions to be used elsewhere, etc. SCOPE is only available in context of certain DATA TYPES: whenever a Cell contains an entire Doc, any whole document of any kind (image, video, vector, PDF, JPG, BMP, DOC, etc) or any Web Page, text longer than x characters…

Scoping is available for any Cell containing a clipping from the Web: when you Scope it the Web Page is opened in the Scoping Window, with the area displayed that was clipped. There is an “active marquee” around the current scope, which can easily be resized from the corners and sides, or dragged by a drag handle. Our backend systems will have to keep track of the webpage, maybe archive it, create a Permalink, or link to Way Back Machine.

Often it will not be necessary to Scope in order to clip the desired data sight. If a website is dragged in by its favicon, it is done automatically by a simple algoritm… In the case of a textual document, the first significant words are chosen automatically, and in the case of an image, a thumbnail is displayed… But if the user wants to change that, they may need to Scope manually. 

If a portion of a document is copied from one cell to another cell, Scoping that new cell should also result in displaying the very same source document, with the current Cell’s Data in focus and highlighted.

[in the Scoping Window] Scroll bars appear only if the data is overflowing. The other cells are displayed around the edges just for visual reference, they cannot be manipulated when this cell is maximized. If you want big cells, just make big cells. You also cannot leave a cell maximized and move on to working on other cells. You have to minimize it… or perhaps just clicking any other cell minimizes the current one.

We can see here that the user is in process of selecting the word “MAXIMIZE” in the title above. When this Maximized Cell is again minimized, the Cell will display only that one word. The word will be STYLED according to the Cell’s current style (default format for a single word is in Heading 2 size, but it inherits other styling (Font, Bold, Color, Etc) from the underlying data source.) Of course, styles can be changed to something other than default. And of course, the word can be selected and edited from the minimized cell without going through all of this. 

METADATA is data about the data, created by the program not the user. For every table there is a Metadata table. For every cell in the original table there is a row in the Metadata table. Examples of metadata: "date of data entry", "name of user who entered data", "web address of source", "permalink to source", "user created TAGS associated with cell", "user created TAGS associated with data", "wizard created TAGS associated with cell", "inferred domain for data", you get the idea. Some of the Metadata table will be viewable/ accessible by the user, but not all of it. In some cases, the MetaData can be edited by the user, as in “user tags”, this is done not in the MetaData Table, but in the SuperDoc by editing/adding/removing tags from the cell or data… of course we may have a MetaData cell for “user deleted tags”.

CELL IDENTIFIER: Each Cell has a unique identification number or URN (Uniform Resource Name). This name is not merely a synthesis of the name of the Table and the coordinates of the Cell. The Cell itself, or rather the Data and the Parameters of the cell and the relation to other cells and the table they are in and their place in the table... are all encoded in the URN... basically a hash value of the Cell, the Metadata, the Meta Metadata, and any parameters for that cell. Maybe this can conform to Resource Description Framework (RDF) 

FORMS are the several basic data structure types that comprise all SuperDocs. 
1. Grid
2. NodeNet, NodeCloud
3. BlobSpace (Venny McVennface)
4. Tree/Hierarchy
5. TimeLine/TimeRibbon
6. Charts (circuit diagram, flowchart, etc.

	Any of these can be a starting point, opened as a new blank SuperDoc. Each of these has CELLS just like a table, though they don’t really have rows and columns. Each of these should have a FIAT TABLE FORM, an approximate translation of the data structure into the rows and columns of a table. 

MODELS are the specific, finite, extensible set of useful SuperDocs that have already been standardized and set-up for use in a particular purpose. Each Model will generally have its own corresponding Templates, Formats, Algorithms, Formulas, Forms, Data Structures, Views, Sights, Widgets, Proxies, Menus, and Outputs... which the wizard will help the user apply to their individual Unit Instance. Most of these parameters will be user-selectable, will have more than one option, but will have "Most Reccommended" settings (based on the user community experience).

Theoretically, all Docs will eventually conform to a MODEL or TEMPLATE. But we cannot start here (it would be way too fucking complicated)

WIZARDS go along with MODELS, they guide the user in correctly filling and using the particular Model with which they are associated. They are equipped with many scripts, algorithms, Bots, Spiders, and Apprentices, to fetch data, request user input (guidance, approval, etc.), launch new search terms, verify sources, redundantly verify data associations, and generally help the user master the use of the particular SuperDoc.

APPRENTICES are Wizards which are associated with a model, but are not the primary Wizard for which the Model is named. They may be active or latent. These will usually be generic or universal Wizards which are useful across many Models and Forms. Such as: 

ALGORITHMS are complex procedures or formulas which operate upon the data of the SuperDoc, and may refer to external sources as well. For instance, in the example of a SuperDoc which is used for comparing movies; some user may create an Algorithm which constitutes a “Recommendation Engine” … This could be quite a complex program, taking input from such things as the user’s Facebook page etc. to find the perfect movie to watch. Hopefully, whoever created this Algorithm would create a bit of a Wizard and plenty of documentation to guide someone in using it. Or, on the other hand, if it was a cleverly made script, the user might not need to know how it works. 
	
Algorithms could be proprietary. In theory, any scripting language should be fine for implementing an Algorithm for a SuperDoc: Just call a cell by its unique identifier number (which is in the Row Header for that cell in the Meta Table) and the permalink URL of the SuperDoc (which is in the Row Header for the Heading’s row in the Meta Table). If you want the script to be included with the SuperDoc, or want the output of the script to be shown in a cell of the SuperDoc, then you can just paste the whole script into a cell. If you want the script to remain proprietary, you can specify a cell (or several) in the SuperDoc for output, and use buttons or widgets if needed in the cell(s) for the user to interact with the script.

VIEWS are different ways the user can arrange or delimit the way a SuperDoc looks. There will be a small set of VIEWS associated with each Model which are particularly useful in that Model, and customized/automated/scripted for that Model. There is also a VIEW menu in the application where the user will find several generic/universal views, and such items as “Full screen” or “Size”, like in any normal software. 

SIGHTS are a subset of the whole SuperDoc. For instance, one Sight, for a basic comparison SuperDoc, might be called "concise view for embedding in website" and it would exclude Column Headers and Row Headers and perhaps many Columns altogether, just focusing on the essential data cells needed for sharing with the website's audience. This would be selected and named by the user, or created by the creators of the Model (that's us!) to meet the expected needs of the Model.

FORMAT: (FORMAT effectively specifies the DOMAIN) There are many many possible FORMATS for data in a specific cell (normally applied to a whole column). These include things like "Currency" as in Excel, but go way beyond that... One format is Currency, but a whole nother one is "Price", and yet another is "Cost" and another one is "Current updated lowest price on Amazon.com". Get it? Another format is "Star Rating", for this one the user must specify an API or source for the star rating, and in the cell is displayed the actual stars... if you entered "5" then changed the format of that cell to "Star Rating", the cell would then display five yellow stars, and the metadata would indicate "value entered manually by user X, static, date." It will be the job of the Model's Wizard to automagically determine the user's intent and apply data Formatting. Otherwise it could be a lot of work and confusion, for the user to try to go through a rather long menu of possible Formats to apply to a given data entry.

The DOMAIN of a cell's data is the allowable range or scope which data in that cell can take. This is often unlimited and/or arbitrary. The domain of a "Star Rating" cell would be 1 to 5. The domain of a cell with an image in it might be any image... or it might be any image with at least one cat. The domain of a Currency formatted cell may be any number. Some FORMATS have an associated domain, as in the case of the "Star Rating". A cell may have a domain of "any number”, or more likely "any positive real integer", etc. A common domain would be "a single word", or "the value either yes or no".

A PROXY is what is displayed in a cell in place of the actual data. In the case of audio data, the proxy may be a tiny audio player WIDGET that fits in the cell. In the case of an image file data, the proxy may be a thumbnail image. In the case of a "Star Rating", the proxy may be an image or interactive widget showing the actual gold/grey stars (the widget lets the user assign their own rating, right in the cell, i.e. change the value of the data).

WIDGETS are interactive controls that fit in a cell. They are often a PROXY for data that needs some UI Controls. Also a small interactive graph, diagram, or chart that fits in a cell, with some interactive controls. The controls may adjust the display of that graph, or take input from the user to modify the underlying data. Some WIDGETS are made to more clearly display the output of an external data source, such as an RSS feed, or API from another SuperDoc or from a web source. A great example would be a “ticker”… I could put many tickers in a doc, each in its own cell. The tickers should be responsive: they adjust to the size/shape of the cell (if I make the cell too damn small, the ticker is clipped). These tickers could contextually styled from the main styling menu (or the same exact options in a right-click modal)… I can change the fonts/colors/brightness of course, and also select from a menu of ‘skins’ (to make them look like hardware for instance) including ‘none’ in which case the cell’s border (with its own styles) is back in play. Also a speed control would be nice, this could use a buffer to store the data from the external feed, so the doc control the speed (a warning “out of sync” may be necessary). Some WIDGETS are controls for the document that are active even when the document has been shared with its Closed ID: in other words, they are controls inside of cells that always active. For instance, an audio player widget; you want anyone viewing the document to be able to use it. For another instance, I may want anyone I share it with to be able to add a column for their own star-ratings; I should be able to add a widget that adds a column of star-ratings and prompts the user to enter their name in the header of that new column (this would make a great Trials app). For another instance, I may have a doc that has some data and formulas that “slices up shares” or whatnot, and I want the user I share it with to be able to slide some slider controls to see different results in the pie chart… I all these cases I don’t want the other users I share with to be able to actually edit the document, I just want an interactive infographic so to speak. Or maybe a data-gathering tool (a form of form, you might say). Yes, this means you can essentially build apps. And remember, these things are totally embeddable!!! (the exports are not) As a user who finds audio files, I want to be able to add those audio files to my document, so that I can organize them just like everything else I find. As a user who finds some complex data, I want to add some complex form of that data (like a graph) to a cell even if it doesn’t come already in that form, so that I can see what I want to see. As a user who finds some complex data, I want to be able to interact with it in a cell, so that I can change what is there directly. 

PRECISION is simply the number of decimal places, or size of thumbnail image, or whether a "Star Rating" is rounded to the nearest whole star or what. Sometimes it is the minimum allowable resolution of an image or vector or PROXY image. As a user, I want to set the precision of a cell, so that I am in full control of how the data is displayed (such as rounded-off)

EXPORTS are like the graphs and charts of a spreadsheet table. They are the "final product" or presentable, often printable, infographic visualization of the data in the SuperDoc. A SIGHT of the SuperDoc may also be a presentable form, and in fact will often be part of an output (for outputs like WikiArticle). When you are in the “PRODUCTION” tab of the menu ribbon, you will choose a menu item under “EXPORT”, for each export you choose, you can then set the ‘scope’ of the doc you want to be exported… This could be the whole doc (default) or any subset. For example, for a .ppt export, I would want to choose scope for each slide. Each slide would start with one ‘sight’ and I could add more, and in each ‘sight’ there would be a production view (styled, formatted for display) of some section of data from the doc. [this is a bit like how Rhino handles its print views] Very cool: an auto-generated final slide/page of ‘credits’ –this would have attributions, citations, and copyright notices for included third-party works, and you can customize the ‘thank-you’ message… You can delete this slide, but only with a stern warning not to.  Exports are a new file, with extension like .pdf or .ppt or .doc, and they can be copyright of the author.
EXPORTS:
1.) Infographic Poster
2.) Essay/Report (with several specific styles: WikiArticle, SciPub, HighSchool, etc, and import/create your own style guides)
3.) Presentation/Slideshow
As a user, I want to make some kind of presentable ‘final product’ from my document, so that I can be done with it or turn it in or share it in a finalized form.

			

BUTTONS are UI controls in a cell. Many, if not all, of these are context sensitive i.e. they appear in the cell or function differently depending on the DATA in the cell. Every cell has a “MENU” button, this is the small triangle in the lower left of the cell, which obviously opens the Menu for that cell. Row Headers and Column Headers have Buttons for moving the Row or Column respectively. In many contexts, a cell will have a “VERIFY” Button which (usually, depending on context) takes the user to the source of the data so the user can verify that the data is correctly entered. In the context of a cell (a whole column of cells, normally) which is used for a “binary” (yes/no, on/off, check/x) data point, there will appear buttons to switch between those two choices. In some contexts a Button may be part of an Algorithm or Formula, moving/modifying data around the Table.

ROWS, COLUMNS, BUTTONS, MENUS, WIDGETS

PARSING, SCRAPING, VERIFYING, 

This is an enhancement to the regular search bar, a kind of filtering. It is like a combination of filters and operators. There would be a set of operators created, flags really. These would be available from a drop down menu in the left hand end of the search bar, they could also be typed in by their abbreviations. The results page would be similar to Oogle Shopper. Oogle Shopper is most similar to Super, because it helps you get the info you need rather than just pointing you toward websites that may or may not have what you need. Oogle Scholar is also a step in the right direction. The flags could be shop: and scho: respectively. 

But after you have found the info you wanted, then what? Chances are there is more than one relevant item. In Oogle Shopper you may have several items to compare or several vendors to choose between. In Oogle Scholar you probably have dozens of papers to sort by relevance and select for use. 

At this point Super helps you build a Supe from your results. A Supe is much like a spreadsheet in some cases, but is specific to each particular flag that originated it. It organizes and collects the info you were looking for. The idea is similar to saved searches, but is not saved searches. It also a bit like a web clipper, but the clipped items retain their association with their respective web sources.

 A SuperDoc helps you save and organize what you found. And of course SuperDocs are automatically saved in your account, they can be re-opened later, shared with friends, etc. Zuper helps you create a Supe using specific algorithmic techniques dependent on the flag in use, and also queries and guides you to clip and fill in the info yourself. Yes, it is also a bit like a web clipper; but it is not a web clipper. It helps you “compare and contrast” the items of interest that you found during your search. Not just whole web pages, but stuff taken from web pages (or documents of course). Of course, sometimes a Supe may contain mainly webpages; their hyperlink address and a relevant thumbnail, if that is what you were looking for. And Supes can also take other shapes besides grid; radar and target graphs would often be useful for comparing items, as would bar graphs, scatter plots, etc.

Two-Way Street: Just as a SuperDoc can be used to get info from the web and organize it, so also can a SuperDoc be used to organize a user's own info for inclusion on the web (as a sort of API or database, linked to a website)

Any cell can be used as an output or input to another program or website... We provide a script and wizard to make any cell from any table into an API.

Launch Pad App.
The Launch Pad App is for smartphones. It would work great with Android, in fact if you really want to make Android dominate the smartphone world, Launch Pad should be part of Android. 

Launch pad is the widget to end all widgets. It is a place to create new content, bring existing content in, mix original and existing content together, edit content, and then send content out. It is modular, and thus highly customizable. I am not able to release many details at this time. It is a game changer. 

Improvement to Pats:
When inventors, pat attorneys, pat agents, pat examiners, and others involved with pat search through the pat databases, they have a specific purpose. In almost all cases they are searching for patents that have a relationship to one particular invention. For instance, an inventor is searching for all patents that are similar to her current invention which she would like to patent. Usually there will be dozens of prior art patents that are relevant, some much more relevant than others. The most relevant patent would be one that invalidated the patentability of the inventor’s current invention. 

All of the patents returned in a search need to be organized in a hierarchy, and specific features need to be correlated. That is what a Supe is for. As I said before, each Model of Supe has its own format. A pat: Supe organizes and collects all prior patents that are related to the invention one is searching for, and helps display features of those inventions for comparison. The Supe doesn’t just do it all for you of course. You have to examine the results one by one as usual. But when you find a pat that is relevant, you click the “add to my Supe” button. Then AI tries to find the info on that particular document that will fill in the columns of the Supe. You specified, with some prompting of course, which columns etc. you wanted to have active in the Supe. If you add columns later, Super will simply re-open all the documents and look or help you look for the info for the new columns.






Dear Friends,

I come to you now asking for your investment. 

I and a few close colleagues are building several new internet applications, and building a company to deliver them. The services are, generally speaking, our contribution toward moving "from the Age of Information to the Age of Knowledge". 

We are asking our friends and family to invest in our new company. We are betting our time and money that this project is right. This could be huge. Even if it isn’t huge, it will be big.

These technology products will generally be of use to everyone on the web and can be used with ease by anyone from 5 years old on up. For the most part the products are free, with several powerful vectors for monetization built in.    

I come to you because I respect and admire you. And also, because you may have means to invest in something on the side. I respect and admire you for that, too. I know you have worked hard for what you have, so I don’t expect you to take this chance lightly. I hope you will invest for any reason, but I hope most of all you will take a little time to look at the real innovation we are presenting and invest in it because you think it will be good. Of course, it would be great and totally acceptable if you are willing to invest in me personally, out of kinship, friendship, or sheer optimism. 

For now, let us refer to this new thing as a "Web Clipper"... that is what most people will call it. However, it is a lot more than that. This new thing has the potential to add something to the world... In the same sense as Google and Facebook add something to the world. Basically, this advanced and comprehensive (yet effortless to use 😊) Web Clipper will help anyone on the Web turn Information Overload into an Information Payload: a concise and presentable smart-bomb of what they have found and learned online.

There are four main activities a user engages in with this New Thing; Searching/Finding information, Clipping/Parsing information, and Organizing/Using information. (At this point the user will have turned information they found on the web, into knowledge they possess.) And fourth; Presenting/Sharing the knowledge they have gained. There are many tools and actions within the software environment, we separate the workflow into these broad categories for the sake of this narrative description. 

In service of the first function, "Searching/Finding", we can view the software and workflow as performing the following functions (here in order of increasing technical sophistication, not necessarily in the sequence performed by a user. -In fact, the user may not be aware of these as separate functions at all; they are just finding what they want and creating a simple document to organize the stuff they found):

1.) Saved Searches... (Not offered by Google) ... Rather than repeating a search, a user will "re-launch" the search terms from the web clipping document where the information is going. Thus, the search terms are saved with the document, are easy to organize/edit, and are under the control of the user.

2.) Flagged Search... (Not offered by Google) Rather that hoping a search returns an "instant answer" as in Google, we let the user specify exactly what kind of web information they want the search engine to return. If the user is hoping to BUY something, then the "SHOP" flag is in play, and the results will not usually include PDF documents, academic papers, blogs, etc. 

3.) Smart Search with Filtered Results... (Not offered by Google) If you perform a search in Google, and then select a result that isn’t the first result.... why doesn’t Google recognize the simple obvious fact that you are more interested in the result you selected than in the other results displayed? If Google did, then the next time you performed the same search, the results list would be re-ordered to display the results that you are interested in, first. Even more to the point, it shouldn’t even wait for the next time you repeat the search, but learn from your click and show narrower results right away. We can make Google do that. And it goes a lot further. 

4.) Auto Search, aka "My Own Custom Web-Crawling Search Bot" Sometimes web searching can be frustrating, difficult, and time consuming. Sometimes it would be nice if your computer would pay attention to what you have been looking for, learn from your searches, learn from your clicks, and then just carry on searching on its own. We can make your computer do that. 

And all of this without ever necessarily realizing this new sophisticated process is taking place.

In service of the second function "Web Clipping", we can view the software and workflow as performing the following functions (here in order of increasing technical sophistication, not necessarily in the sequence performed by a user. -In fact, the user may not be aware of these as separate functions at all; they are just finding what they want and creating a simple document, organizing that stuff they found):

1.) A good web clipper: this is simply a few methods and tools for selecting/copying/circling/grabbing/etc pieces of data and information the user finds on the web. Information/data takes many forms, such as text, numbers, images, files, documents, scripts, graphics, animations, audio, video, etc.
 
2.) Screen Scraper; A screen scraper helps a user get information off a website or document. Sometimes all of the website is wanted, often only certain kinds of data are wanted; such as "just the facts", for example.

3.) Data parser; a data parser helps a user take data from the web, and put it into the right places in the document where they are organizing the information.

In service of the third function "Clippings Organizer", we can view the software and workflow as performing the following functions (here in order of increasing technical sophistication, not necessarily in the sequence performed by a user. -In fact, the user may not be aware of these as separate functions at all; they are just finding what they want and creating a simple document organizing that stuff they found):

1.) Data Structures, such as tables and timelines, into which information from the web can be placed, and within which this information can be arranged, rearranged, organized, sorted, stored, and viewed in many ways.

2.) Pre-made Templates and Forms for various specific uses, and associated tools to help the user fill and use these. Also, of course, we give the user tools to turn their own novel uses of the tools into new Templates and Forms.

3.) Wizards, which guide the user in filling these Data Structures and Templates, and which offer help to the user to use various tools and actions to further organize, use, and understand the information they have collected.


In addition to the above features and workflows, there are also:

Social Networking features:
⦁	Share, Like, Favorite, Follow, Comment, etc. on Documents or even individual clippings of data
⦁	Authenticate, Vouch For, Rate, Flag, Tag, and Classify documents and individual data clippings
⦁	View aggregate Trust Ratings, Authenticity Ratings, Veracity Ratings, and Stats 

Monetization Features:
⦁	Native or Embedded advertising (in most templates)
⦁	Commercial Use commissions (for EBay, Amazon, etc. buythroughs)
⦁	Institutional and Academic License (no ads, admin controls)
⦁	One-time "Proprietary Usage Allowance" 

Dataset features: 
⦁	Update, Verify, Trackback, Auto Cite, Permalink, Markup, 
⦁	Build, customize, and launch Bots and Spiders to find and fetch Data and Feeds
⦁	Input from API, Output to API, Output to HTML, Input/output Feeds and RSS, embed on other websites or documents
⦁	Apply hundreds of Formulas, Algorithms, and Scripts -- From us and from the user community.
⦁	Apply or use Widgets, Proxies, Controls, Menus, and Context Sensitive Menu-Items, which can be added to a Data Cell, or in most cases are added automatically or via the guidance of a Wizard
⦁	Apply Data Formats, Table Formats, Cell Formats, Styles, Views, Colors, Fonts, and CSS Stylesheets

Output Features:
⦁	Charts, Graphs, Flowcharts, Diagrams, 
⦁	Composite/complex infographics presentation (like a poster)
⦁	Sights (clipped subsets of the organized data for specific uses, such as embedding on a website)
⦁	Article Outputs, such as Wikipedia-type formatted articles 
⦁	Feeds, RSS, API
⦁	Calendars, Timelines, Gantt Charts, Mind Maps, To-Do lists
⦁	Slideshows and Presentations
⦁	Reports, Abstracts, Synopses, Statistics ( about the data)

Data Structure Configurations: Besides the basic "Table" form, there are several forms that you can use to collect and organize the information you are finding. These can be used while building your collection of clippings, or you can switch to one of these from the Configuration you started with... Though some might not be applicable, depending on your project.
⦁	Table/Grid
⦁	Node Network/Node Cloud (2D/3D)
⦁	Timeline/Time Ribbon (1D/2D)
⦁	Calendar
⦁	Blobspace (Venny McVennface)
⦁	Charts/Diagrams
⦁	Tree/Hierarchy
⦁	Geospatial (maps) and Geo-spatiotemporal (maps + changes over time)

And a whole army of Special Case MODELS for many of the things a user will want to do with the information they have found. Each of these Models has associated with it a Wizard to guide the user in all aspects of using the Model. They each also have their corresponding Templates, Formats, Algorithms, Formulas, Forms, Data Structures, Views, Sights, Widgets, Proxies, Menus, and Outputs... which the wizard will help the user apply to their individual Unit Instance.

Remember, if you are not quite sure what it is we are describing here, at all times, think of a Web Clipper; these are tools to help you organize stuff you find on the internet.

Some of these Models are very simple; just a grid and some templating to guide what goes into that grid and where. But some are quite sophisticated, with a good bit of scripting and complex algorithms. 

 MODELS:
1.	GRID
2.	COMPARATOR
3.	COMPARE/CONTRAST
4.	PRO/CON
5.	RUBRICK: set out a list of objectives and the scoring criteria to meet them
6.	FEATURELIST
7.	SCRAPBOOK
8.	BIFURCATED: to set up identification key or decision guide
9.	SELL
10.	PAT: Helps you sort by relevance
11.	MAKE: Helps you create a “recipe” of parts and steps; Helps you source the parts, list and compare alternatives; Helps you arrange the steps
12.	WATCH: Helps you build a “Recommendation Engine” for movies; Helps you organize movies you have seen, haven’t seen, and etc.; Helps you discover new movies; Helps you implement pattern recognition algorithms across the database of movies to find What to Watch
13.	COOK: Compare recipes for the “same” or similar dishes; Link to related dishes
14.	SHOP: Obviously, helps you create a table comparing products and/ or prices
15.	SCI: Helps you do real science!; Collect, organize, collate, document, annotate your DATA; Custom Wizards for various types of data gathering, such as Data Loggers, Field Recordings, 
16.	PIC: Compare and collect images; Run algorithms across the collection
17.	POP: Compare who is hot, trending, scandalous etc.in Pop Culture
18.	META: Helps you compare SuperDocs
19.	AFFILIATION: For finding/showing associations between Companies, Organizations, Brands, even People
20.	News Cyclops:
21.	Veracity Truth:
22.	Periodic Table of Whatever
23.	Assembly: For mechanical things, such as cars... Wizard helps you group things into a hierarchy, much like a tree structure, of subassemblies, parts, subsystems, etc. Has associated EXPLODED VIEWS: help create 3D PDF
24.	LADDERBRACKET: Sports Bracket: (forward or backward... predictive or recording)
25.	Family Tree
26.	Species Tree
27.	GLOSSARY
28.	LEXICON/VOCABULIST
29.	INDEX
30.	GAZETTEER
31.	THESAURUS
32.	DICTIONARY
33.	ATLAS
34.	BIBLIOGRAPHY
35.	CONCORDEX
36.	TimeLine/ TimeRibbon
37.	DockStack
38.	TechStack
39.	Cast (for movies/plays/shows)
40.	Career (job search)
41.	Org (people and their roles)
42.	Plot (for writing)
43.	StoryBoard
44.	Defence (legal)
45.	Law (Laws, regs, rulings, )
46.	Suit (Civil Law)
47.	QNA (Organize questions (and their forms) and their answers (and their forms))
48.	Mech (specialized version of Assembly, for machines)
49.	Electrician
50.	Electronic
51.	OpticBench
52.	Architecture
53.	VESSEL
54.	MAPPY (GIS)
55.	STRAUNT (business)
56.	SMALLBIZWIZ
57.	MODELFAX (like CarFax, but for anything)
58.	Localist (like Angie's List, but for anything. Leave ratings and feedback for local businesses.)
59.	MetaModel (organize/find Viats)
60.	ESTATE (real estate)
61.	BOSS (Rate employers)
62.	PERSONNELL (rate employees)
63.	RECRUIT (compare candidates, resumes)
64.	REGS (laws and regulations)
65.	MEASURE: Proposed Policy and Regulation, votes, elections, actions, appointments, coups, etc.
66.	Politic (platform, position, people)
67.	BOOLE; logic-puzzle type grid, with potential to build out very extensive, make complex logical deductions, sophisticated Algorithms available
68.	PRESENCE: Helps me find, keep track, of and manage my online accounts, subscriptions, memberships, profiles, reputation, activity levels, feedback, and any traces I leave behind like ratings or reviews. Helps keep profiles updated and synchronized. Helps me remove online presence any time or when I pass away.


We are not building a search engine. The user will still use Google, Bing, Duck Duck Go, Etc. We are simply giving people tools to actually DO SOMETHING with what they find. Through the processes described above, and with all the actions and functions we are building into this software, users everywhere will quickly and effortlessly turn Information -from out there on the web; into Knowledge -which they have, control, use, and share.

The result of this will be to enable anyone in the world to turn Information Overload into their own personal Information Payload --a heat-seeking smart missile of directed organized knowledge. 

When was the last time you or someone you know said "I did some research on such-and-such..."? When really you know full well that what is meant by "research" is spending some time on Google and on the internet, reading websites, blogs, PDFs, articles and all the rest. 

Have you not wondered how to turn all that SEARCH into real RESEARCH? Well, the answer is, as it always has been since there has been the word "research", that you sift, organize, clarify, restate, what you have found. You make the Information from Out There into Knowledge inside of you. You turn it into a concise result you can point to and show others.

Google promised to "Organize the World's Information", but they have failed or broken that promise. Or, maybe they are doing it, but if so they are doing it FOR THEIR OWN PURPOSES AND BENFIT, not for the people using their products. They are not giving the people tools to "Organize the World's Information". They are showing us where (some) information is, but that is as far as it goes. "Search" is just the beginning... even "Find" is still just the beginning when we live in a world of such vast mountains of information. When you have finally trudged up and down those mountains, finally found the tidbits of information you were looking for that you know can give you Knowledge... then what? What good is a folder full of broken bookmarks pointing to confusing websites? 

At first glance, this app will look like a spreadsheet program, such as Microsoft Excel. But it is not that. In fact, much of what our app does, can be done with Excel --given enough expertise and time. But try to put a picture into an Excel cell... doesn’t quite work like that. Let alone applying functions to that picture. In fact, many of the things people currently use Excel for, they will soon see they can much more easily use SuperDocs to do even better. And then they will see that SuperDocs go way beyond a spreadsheet. 

Freemium privileges in exchange for distributed processing access to a user's computer, rather than money. Even better, we will openize the security, anonymity, and distributization functions/algorithms.

Even better, we will Freemiumize you for your openwork/distriwork contributions on all fronts.

...

Ords

A namespace sector occupied by new words formed by omitting the first letter of an existing natural word:

Viathan
Abyrinth
Ord
Emur
Yramid
Iamond
Etrahedron
Rism
Clipse
Andomize
Echnology
Equence
Equoia
Rilliant
Aptivate
Telligible
Editation
Mperitive
Trength
Opulist Opulism
Ommunism
Emocracy
Epublic
Istillate
Riskocracy 
Rawbridge 
Upiter
Aturn Zaturn 

Meandring


Cinonic 
myninym mininim minonim 
Dinonid dynonyd dioninoid
daenead naemean taefeat 
liminonimil luminominil vaeneav 
laeritireal loritirol opolitilopo
sonolonos sonotonos monotonom
fixif inifaxafini inifini inifinifini 
tesset exataxe texet texalaxet telexelet teloxolet testset
amoxoma amotoma omenemo 
leumuel lemumel remumer razozar refillifer
dibid dipid dixid dionoid mixim
retyter 
antotna antitna anotaxatona anotelletona 
alyzyla alizila
allotolla annodonna annotonna annomonna 
olslo drewerd draward droword trowelewort 
sewes 


...

REPUBLICATION SAFE HARBOR:

If you republish content you got from someone else's website (or other source) just be sure to have content from more than one source. Then you are in the clear. We can easily monitor this, and moderators can check on Docs having content from a single source.  

Also, if the user adds Original User Content (OUC) (not just metadata), there is a good indication of a mashup, parody, review, extension, etc.

...

We could have two "modes" Curated and Anarchic.... Curated being a subset of all content, that we have screened and filtered more heavily for family-friendliness and quality. Anarchy being all the BS including blatant advertising/marketing/spam/junk, hate, adult material etc. Of course we will still have to police for Copyright and Doxxing. There can be separate APIs so Parental Control Software can easily do its work. 

This is separate and distinct from our "best of" and other front page recommendations.

Is this an idea that could apply in other companies?

…

Content Categories:
Could we just “borrow” Reddit’s 11400 Subreddit categories? For your BROWSING pleasure..,

…

Anti-Doxxing policies and policing practices:

…

To compare and research:
Memosnag, Skitch, Springpad, Vennpage
Also “Note taking Software” on wikipedia

…

Further research:
Folksonomy. Understand tagging limitations such as lack of hierarchy.

Also Bookmarklets!

…

STACKING: Rows, Columns, Cells (the 3rd dimension)
Whole rows/columns should be ‘stackable’ via a menu item “nest under”… This is useful for instance: A column of contract paragraphs in heavy legalese could be nested under a column of cells containing a user’s hand-written plain-language summaries, or their one-to-three word descriptions, or both. As always, when drilling down or scoping up, any stacked content should be called/placed IF it is the direct source of the cell being drilled/scoped. For example, a product may have several images but I don’t want all those columns. So I can stack the images in a single position. There should be UI for rotating the stack (hover state should show that it’s a stack, and up/down buttons should appear when cell is selected. (but each image should still have its own scope)). There should also be UI for adding objects into a stack, rather than adding/displacing them to a cell. IF the target cell location is empty, obviously the UI should not appear. But IF the target cell location is not empty, THEN the UI to “DROP BEHIND” should be available WHEN dragging over… 

…

RANGE OF DATES:

On any calendar or temporal sheet, why cant I add a RANGE of dates? When looking at or scheduling or comparing a multi-day event such as a course or class, I need to be able to schedule the whole range between a start and end. Google Calendar does not have this feature. (WTF?) … when scraping calendar dates from the web, G Cal only sees the one-dimensional point date I hover over. It does not see the start and end dates as a 2D range. Boo.

…

AUTO TAGGING WITH RELATIONAL DESCRIPTOR TAGS:

Relational Descriptor Tags are tags that describe a cell’s relations to other cells in its document. Such as, cells that are stacked above or below. A cell could even have a tag which states “R3C6L2” for Row 3, Column 6, Level 2. Or in a blobspace it could be tagged “M21M12M32” Having these automatically added to a cell means the cells contain all the info necessary to reconstruct the structure around them in which they are ordered. 

This is a form of data compression: the structure itself does not need to be stored as a distinct entity, or it could be lost. 

Is this important? It might be very important. How else should the structure be stored? As a proprietary file? If relational tagging is used, the cells themselves, the information itself, contains the instructions for its own organization.  



…

A very nerdy pitch:

“As the internet of information and our own information, become less a rational object and more an ecosystem of models representing all the complexity of the world, we need tools to simply collapse the models we access back down to concise, manageable, human-readable, OBJECTS which represent a well-defined quantum of an area of particular interest.” Blah blah, blah.

…

SMART SEARCH: The “search” half of creation:

Today virtually all search uses ever-increasingly sophisticated inference to try to determine WHAT KIND of search the user intended, what action intention. To avoid this arms race, we can simply allow the user to tell us. This is done with search flags.

…

There is a continuum between “populist software” and “elitist software”. This is seen as a continuum between highly curated content vs anarchic community content. Wikipedia vs Britannica. Apple vs Microsoft. Apple vs Linux. As a software tool, we must find the right balance. We will give users the means to create content but will not treat all content equally. We will have things like “best of” or “editor’s choice”. We give the users the means to create their own templates, but we don’t release those templates back into the pool until we have polished them up, checked them for quality and uniqueness, etc. We will add tags and flags to content ourselves, as well as encourage users to do it. We cannot just give users the means to add tags and flags (they are too lazy, some content would have it, some wouldn’t) We will use moderators for quality as well as policy. We will manually and algorithmically adjust content. Even if this means a lot of manpower. Users will always have the “Collaborating ID” and the “Personal ID” so they can see EXACTLY the document they have created. But it is up to us to release a document into the common pool, where it will be discoverable by anyone. When a user opens a doc by Collab ID or Personal ID, they should see a notification “the most advanced version of this is available here” which then takes them to the version of the doc with the Global ID.

ANNOTATION LAYER: From the Appearance menu, there are drawing tools to add overlaid annotations, such as text diagramming and inter-cellular diagramming. In an Output view these can be off, hidden (viewable at hover, viewable once turned on), or on.

Wait: MODELESSNESS! Output “views” are just filters, hiding and showing objects.

VIEWS AND APPEARANCES: A document should not have separate “editing” and “viewing” modes. That is annoying bullshit. WYSIWYFG. However, sometimes I want to see all styling and the text highlighting and see text as it will appear with markup/markdown applied… and sometimes I don’t. In the Appearance menu, right at the top, there are several check boxes to show or not show that stuff while I am working on a document. And in addition to that, in the “Production” menu/ribbon tab (or whatever it is called) we will generally be looking at a view with all the styling/markup applied… in here are the options for how it will be “produced”, and these Outputs are interactive (except the print/pdf output) so we have controls and settings for things like whether the annotation layer is hidden, off, or on.

THE BIG DILEMMA: All knowledge must be free. All docs must end up in the global pool (even if there may be a delay, and excepting proprietary licenses). If I release the full doc so anyone can edit it, than it will mutate into a million versions. I can still open “my” version by using the Personal ID,


SOCIAL FEATUIRES: Social annotations like “thumbs up”, “like”, “star”, “save”, “heart”, tag, flag, and bookmark… these can be either 1.) collected on a doc of their own (the context is ME), or 2.) related to a specific doc. In the case of 2, the doc in my left-most tab is the default context, but I can change that. When I add any of these annotations, I get a dialog that tells me the context and offers a field where I can enter another ID for a different context: “favorite to SomeOldDoc…”. In the case of 1, I am simply saving a meta-doc that serves as a collection of (or reference to) other docs. I can call this collection whatever I want: “docs tagged with the word ‘cat’…” Different social annotations have different permissions relative to a given doc. Most docs in the global pool can be anonymously (no linked context) tagged and starred.

REUSE OF NODES, SETS OF NODES, AND WHOLE DOCUMENTS: Users bring in “things” from the internet. The Documents and all parts of the Documents are themselves things, of course. It will be very common for users reuse parts of other Documents or whole Documents. 

There must be a rational and semantics-driven pattern to how Documents and Nodes are clipped. This matters, because it drives the RDF semantics we assign to objects.

A Cell has its own identity. It is instanced for re-use in another Doc. Why isn’t it SCOPED? Because, if you drag in a Cell, and the app creates a Scope of the Doc it came from, then what about where it initially came from? What if there was a chain of re-use? It could be a long chain, and the context is lost. Drilling down 12 times to find the original Doc is meaningless.  The scope (and references) of a copied Cell should still be connected to the web source.

It initially appears with the same styling, but the styles can be changed. Changing styles does not change the first part of the Cell’s ID number. When A user Drills Down or views an instanced Cell’s  It initially appears with the same scope, but the scope can be changed. However, scope changes may break the instancing association with the copied Cell: If the scope is changed to include a different number of original objects, then the Cell should have its own new identity. Changing the 

Lets imagine a third part app, conformant to our specification or standard, that wants authorization to use our platform. Any Documents they POST, and nodes thereof, must be properly identified, carry proper metadata (especially references), and our platform must be able to verify same. Therefore, a Node’s ID should be the original resource’s URI/URL and be inseparable from its metadata. If a Node’s content is UGC (text, comments), then the URI was originally assigned by the platform, and the Scope is ORIGINAL source Doc (not the chain of Docs where it has been re-used) If a Node is created by scoping a website to multiple objects (very common!),  then the ID number must capture that… So there needs to be another layer… ID number IS that other layer… It references a data object containing one or more web source URIs.



SYNCHRONIZATION PROBLEM: STATIC/LIVE INFORMATION, ARCHIVING, BROKEN NODES: All information on the web changes. It is all in flux. An RSS feed or a stock price changes rapidly, but any part of any website changes, or is eventually removed.

Should we give the user free choice, whether to keep a bit of knowledge “live” or static? That is a hard choice or them to make. What if they chose “live” and then the information is taken down or moved? Should we follow it if it moves, update its source and scope? How will we get that right? What if the owner changes? Should we update a Cell’s references?   It would be easier to keep everything totally static, but then it all soon becomes Wayback Machine… Should we capture all the changes (back to the point in time when the user clipped the information)? And let the user chose to keep the Scope static or moving forward in time? Then other users could view the past (but only back to the point it was clipped). Would users then need UI to make the whole Doc, or subset of it, live? Or should we default to static (and archive only that), then only try to synchronize if user tries to change the TEMPORAL SCOPE?

Is there any such thing as a TEMPORAL SCOPE? Oh gee, now I really have a he Paste in 

  

OMG: TRELLO… what is it? Project Management? Then how to explain https://trello.com/b/f02kt8xH/platform-hunt-the-definitive-guide-to-platform-business-models ?

It is a big organized collaborative list… Just a list. The project is “done”, or never really DONE, as the case may be.


CASE STUDY: try googling “web platform without accounts”, “online platform without accounts”, “example online platform without accounts”… no can find. But did find https://medium.com/platform-hunt/the-8-types-of-software-platforms-473c74f4536a which led to Sameer Singh
Partner & Head of Research @ 6CVentures. Author at http://Tech-Thoughts.netJanuary 29, 2020 Paste copy of note “superdocs features n ideas”

⛩️ SuperDocs Features and Ideas

KIP: One important metadata point is how many OUTSIDE links a doc has

V2.0: Every doc should act as a sort of template for it's self. A new user should be able to add LIKE INFORMATION to an existing doc with very low effort. This will require sophisticated algorithms. Instead of the doc originator adding complex INTERACTIONS for subsequent users to extend the work, the platform should have the sophistication to PARSE new info into the established categories and arrangements. So a new content adder can just drag and drop a favicon or a whole selection, or just a single image; and the doc's wizard will sort it out. If it needs some human input (which is a good thing), then it can ask. And it should highlight the new cells created, and take the user to each in turn to have the user confirm the automatic additions or make changes.

V1.0 MLP: We can start that off by building the feature that automatically (intelligently) adds "sort" and "filter" interactions to certain docs. This is fairly important. At a minimum, a visiting user should be able to sort and filter without understanding how the doc is structured, and certainly without having to add the interactions to do so. And the doc originator probably won't bother to add them anyway.

UI idea: Each cell has a Cell Menu. How about if, when multiple cells are selected, then they collectively have a single unified Cell Menu. This would improve WYSIWYG. Instead of selecting several cells, then going to the menus to change them together (treating them the same), the menus can come to the cells. This may be a bit context sensitive; "remove", "clear", and "style" should be available, but maybe other options are greyed out. It is a very nice way to clear a SPACE in the middle of my table!

Totally insane idea: "merge-split" SLIDER. Depending on how many cells are selected, it uh, merges them or splits them. Duh. But it keeps the shape if the selection is or isn't a rectangle. Maybe a two-axis (cross) slider or a rectangular widget to select numbers of columns and rows. 

Also, when multiple cells are selected, I should be able to GROW and SHRINK the selection by dragging on any of the four sides or any of the four corners. It would be very annoying if I went to click and my selection was lost. Therefore a blue border AROUND the selection might be nice. That can be manipulated. And inside that group border, when I click on non-selected cells they are added (rather than only them) and when I click on already selected cells (which are highlighted) they are removed from the selection. 

🤖 In fact, even for drag/drop auto parsed populating actions, groups of cells should be targetable by selecting them together.

Also, row/column width and GAP width could be adjustable this way... The widgets are still around the edge of the table, but with a group of cells selected, only that group's gaps and widths should be adjusted. And even so with MOVING! The column labels can say "a" "b" "c" "d" "group of 7" "k" "l" etc. And the group can be dragged.


Three things the devs must try to understand: NODALITY; all things are nodes (including app menus and their configurations) and all nodes are made of nodes, INDIVIDUALITY; all nodes have an individual identity and any collection of nodes (including the app configuration) can be opened if you know the identity, and NO ACCOUNTS; there are none.


p.s. No accounts means no usernames, no avatars, and uh, NO USERS! It also means everything is shared under 💯 percent anonymity. If you need verification of a sharer, then they must share it OUTSIDE of the platform as with Open Knowledge.

🔌 PLUGINS: This architecture should be in place from the very beginning. That way we can put 80% of the work into the POC and just 20% more to get to MLP.

3️⃣ Of course, instead of long complicated serial numbers or hashes,it would be more fun if we had words, like What Three Words. Or adjective-noun-verb: blue.blueness.blueing... blue.blueness.blued... 

🐑 Ramifications: INTEGRATION, SAVED SEARCH, GATEWAY TO THE INTERNET, ANNOTATION (free speech) ... INTEGRATION, PERSISTENCE, INITIATION, ANNOTATION, amateur research becomes close to REAL research, search becomes comprehensive (Find what you were really looking for, eventually.)

💊 Ah! Tabs tabs tabs. Aren't tabs lovely? Where did you think we would put all the menus and special features and functions? Tabs of course! This way, the app's essential menu structure and interface stay very clean and minimal, and when more menus are needed, more tabs are added. This may help keep it accessible for kids.

⛰️ MEGA TABS! The main menu "ribbon" consists of five top-level groups, which are grouped in big tabs at the top of the page. But this should be minimizable; and when it is minimized, the TABS THEMSELVES HAVE THE MOST USED MENU ITEMS RIGHT THERE TO USE! Has this UI pattern even ever been done? Also, there should be multiple UI to minimize and maximize: dragging the break line up past a threshold limit, and a little switch in the left of each tab, rmb and hotkey as well...

BIZINFO: (Alias INDUSTRY) Is for sorting out "business information", sectors, subsectors, supply chains, support chains...

🦍 SHARE menu: "Share With My Peers" shows the Sharing ID and explains that you have to use your own email... "Share With Everyone" begins the dialog to release into the global pool. "Share with trusted collaborators" begins the dialog to create new Editing ID/Collaborator Alias pairs and share them.



📃 About Templates: A good Template is GENERAL. But we may find users creating more narrow or specific versions, and therefore we can create a named Template to meet that need. This may be a special case of the general model, and therefore the name is basically an alias. A special case means it may have trained bots, specific labelled fields, narrowly scoped algorithms, and contextual dialogs, etc. And, if there appear several similar special case templates, we can create a menu function so a user can select their special case from the general template.

👽 Named Templates often have Aliases; other names that simply point to the same Template. Except that the alias may be narrow or special case of the more general template.


🤖 Thoroughly vetted, vetted, unvetted... Instead of different content zones, curated categories, parental controls... Just badges. That only we can add... Also "best of", "editors choice", "trending", etc.

🤸 CONTENT CONTROL API: everyone should have the right to filter our platform as they see fit. In fact, that should be the LAW for all public platforms.

💭 It's a RESEARCH ENGINE. The Information-Knowledge Continuum currently consists of search, research, and communicate. Our system addresses the need for specific tools in the research space. And let's be clear, these are aimed squarely at the everyday mass market consumer. Just as Google etc made SEARCH into something ANYONE could do to an elevated degree, we make RESEARCH something anyone can do to a profound degree. No longer are professional specialized skills necessary to turn vast and diverse sets of information into clear and conclusive research. Brilliant search was the first revolution that gave every man woman and child a stake in the information age. But now we have TMI. The average regular folk is buried and overwhelmed by information. Only specialized professionals and firms can really cope with turning the results of search into research. We have rectified that. We leave search to those who have begun it, and also the same with communication of the results of ones research. But the research systems: we  provide.  

🐎 Giving each individual person the tools to organize the world's information, from their own perspective, just as they see fit.


🚀 To help people organize the world's knowledge.

📰 CYCLOPS: "Follow this Story" integration button embedded in news-related websites. This takes the story to a sheet (opens sheets, suggests choices, gives options to navigate to existing sheets or start new) Helps user find original source publication, alternate write-ups, and most importantly: find, add, organize follow-up stories on same headline thread. Usually, a site that embeds this button will have relevant content (particularly the citations) that link to related info, such as the original source.

🌾 GROW: a template for crop planning. Climate, almanac, varieties, pests, nutrients, pest controls, soil, notes and history

⛈️ ALMANAC:

🎟️ BESPRAC:

🍄 FIELDGUIDE: A template for, yeah, field guides.

🍷 SAMPLE: a template
Dear Sameer,

Interesting story of how I found you and 6C… I came via your Platform Hunt project (Very helpful and original thinking by the way!), which I came to via a Google search “example online platform without accounts”, which I was Googling as part of the ongoing development of my project. My project is an app and platform which will be used for (among other things) making comprehensive and integrated lists such as the thing you have developed on Trello called Platform Hunt. 

In fact, your use of Trello to make Platform Hunt is a fantastic case study which I will add to my case studies of the unmet need for the app and platform I am developing. 

It is interesting to me that 1.) Trello is useful beyond what the creators originally envisioned, and 2.) You have bent Trello to a new purpose. 

Please let me tell you about my project. In fact, I really would like your help. This project is in need of early-stage support, and I think it would be a good fit for 6C Ventures. (And I am in need of collaborators!)

And I really sincerely apologize for the obnoxious length of this letter… Really.

My app and platform (a utility platform) is fundamentally made for doing exactly what you did with Trello: get things you found on the internet, bring those things together into an integrated and unified space, and organize them according to your own expression of knowledge. Of course, Trello has different features; they have a tight collaboration feature set; our collaboration mechanisms (which are not a beta priority) will be more socialist (ie similar to an Interaction Platform).

But the interesting thing is how you turned Trello to your own purposes. Did you notice at the time? Did you think “Is Trello the right tool?” (Perhaps Trello was an obvious choice if, for instance, you are a skilled Trello user already, or if the important feature was the controlled collaboration model). However, I would like to point out that Trello is not a very well-suited tool for this Platform Hunt project.

What are the other options? Well, let me ask an even broader question: What can one do when they find things on the internet and they want to learn from those things? Put another way: As you search, so will you find. As you find, what will you do?

To date, we have several choices of tools to help “deal with” the things we find on the internet: 
⦁	Bookmarks…
⦁	Leave it open forever in yet another browser tab…
⦁	A text document, such as a MSWord doc, or online on Medium.com…
⦁	A spreadsheet, such as Excel or Google Sheets…
⦁	Email to oneself…
⦁	Trello, as you have shown… And probably an endless parade of other tools that could be made to work in a similar sense, including good old HTML (make a website about it…).

But wait, what are we trying to DO when we are searching and finding things on the internet? What were you and Michael trying to do?

TURN INFORMATION INTO KNOWLEDGE. That’s what. Or to be more precise “form knowledge by aggregating information, and express that knowledge as a thing on its own.” 

There are probably thousands of good examples of platforms which could add to the knowledge being expressed. Problem is, the internet is a vast galaxy of information, and people are just people. People need tools. Google et al essentially created the information revolution by giving regular ordinary people tools to search and find information in the vast wilderness. 

But problems remain: what does one DO WITH some information once they have found it? And also, is a search engine even adequate to find what one is seeking? 

Well, try searching for “example online platform without accounts”. I did, and I found your project. But that isn’t what I was looking for. Being a human, you can probably tell from the search string what I was really looking for. I also tried “web platform without accounts” and others. 

The point is, the information is out there, and I will find it (I am finding it), but a search tool, no matter how perfect, cannot provide the function of forming knowledge from the information found, or expressing that knowledge as a thing on its own. 

What is needed is not a better SEARCH function, but a GATHER function. 

By gather function, I mean a noun equivalent to the noun CONTAINER. This should address the problem of FINDING information, by allowing the act of finding to stretch out into a temporal process, accumulating the little pieces as they are found over time. And it should address the problem of FORMING KNOWLEDGE by serving as a space in which the pieces may be arranged, rearranged, organized and reorganized. These two problems can both be addressed by simply having the right kind of container. 

There remains the problem of EXPRESSING knowledge. People usually want a clear and comprehensible unit, to share with others or just to share with oneself. This is how knowledge is transmitted between minds or simply reinforced in one’s own mind. (To be precise, knowledge must form in the mind) And again, having a well-suited container can help a lot, if it has features that enable displaying the contents as a unified whole.

Let me tell you a parable.

The Parable Of The Clam Diggers:

The example of the Botanist Backpack:

However, these GATHER tools don’t quite go all the way. The ultimate expression of the fruits of the clammers’ search is a container known as a “cooking pot”. And the ultimate expression of the fruits of the botanist’s search is a container known as a “museum display case”. In the case of Platform Hunt, is the proper and final expression of the fruits of your hunt (the most polished and shareable product) the Trello board, or the Medium article?

Let me show you a tool for trials/samplings/judging/ 

📰 Wizards like Cyclops probably should live in a smallish badge in the Doc header. And if they have something to say, a little speech bubble icon is overlaid on the badge. Click the badge to see the Wizard's various dialogs. More than one dialog may be in the Wizard's book. And as things change in the sheet, new dialogs will be offered. (More than one wizard may be plugged-in to a doc, too)

If a user wants to "follow this story" from within a doc (or a third-party site), the button will launch a spider which will send back suggested articles, especially looking for new original content. It may also ask the user to train it by clicking on several examples it returns. Spiders should be able to "clip" content just as a user does. Ideally, a trained spider would add new articles to the doc, along with a rating of how "new" it is and a "dif" highlight. Then the user would just move/rank/rate this new content (further training the spider).

🔘 For that matter, many of the named  prefab Wizard templates could have their own embeddable buttons that third-party websites could easily add to their pages. This makes integration a snap. Of course, if a site does not have a button, user can and will always be able to select, crop, or scrape data, then drag into SuperDocs.

💣 On the other hand, with a browser extension, a user can start with some web content, and add bits and features from SuperDocs RIGHT ON THE PAGE!

⚔️ On the third hand: If a webpage has a SuperDoc embedded, a visitor can always add rows and columns and cells to that SuperDoc ON THAT PAGE without a browser extension! Because, after all, it is OUR SuperDoc they embedded. We could give site operators the privilege of locking their cells, or even of disallowing visitors edit rights altogether. For a price. Of course, when I embed a doc on my third-party website, and then somebody comes along and changes that doc, the changes are not saved in my website (unless I'm damn fool enough to embed the Collaborating ID!) If so-and-so wants to hang on to their changes, they will have to write down the new ID(s). (Which raises the question: at what point is there a new, distinct doc? Maybe never! If you can access any snapshot of any point in the universe, the doc IS the snapshot. But that could be very annoying...) But p.s. all knowledge must remain free: even if you embed a doc in your page, unless you have paid to keep it proprietary, than it is also available on our platform, for anyone to use, clone, or embed.

🎵 Check out the way Grammarly has "alert cards" for its interactions. This is exactly what I mean by a "wizard" dialog; a menu of individual, non-sequential statements. Each is attached to an issue, and each has buttons for various actions the user can take to respond to the issue, get more info, etc. Also, text editors like Atom, the linter plugins have a similar system.

🔎 Remember: Search is secondary... All features and functions can be developed before and independently of the search related features... This doesn't mean search isn't important. (Search features are: Search Engine Scripting Control, Smart Search, Search Terms in Header, Ongoing Robo Search... Etc.)

🚻 Consumer first, pro second. As far as development cycle goes.

🏴 when Scripting smart search, it would be nice if the user could "blacklist" a result they don't like. So it doesn't come back. Fuck you very much.

😉 Add an "input, no, Interaction widget" to a cell: open the "Inputs" menu; a new tab opens with all the input type widgets/cells shown organized like a Doc (with most relevant/recent first), with styles just like the doc you are working on... If you already had a cell selected, then just double-click the input you want to go there, else drag one back to your working tab. ["Input" means something a third party, without edit rights, can add input to, these will include adding a new column, star rating, etc.]

• Diffbot®! Holey shit! Web Page Content Extraction. This could do a lot of the heavy lifting in the background. Also see: Readability®, Boilerplate®, AlchemyAPI®, Embedly®, and Goose®.

• ATLAS.ti is software for "qualitative research"... They use words like 'classifying, sorting, and arranging'.

• We will not create, receive or store ANY information or profiles on our users. All we will do is analyze the aggregate usage of the information created on our system. So the only 'secrets' we have to keep are data relating to usage of our product, such as how many times a given image was reused or shared or tagged etc. We can ring-fence this 'secret' data by periodically removing it from the servers. That way even a Spectre type exploit, or any other attack on the cloud, cannot find but a brief period of accumulated statistical data.

• What about "share", "connect",  "invite", and related 'social' features? A). You SHARE links and encoded hashes only...and you have to use your own comms: yes, you have to copy/paste into email! We don't want ANYTHING to do with your personal info! 

DEPRECATED • Rather than a User Account, a user should always be able to create an Individual Hash... If you register the IH (basically, log in) you can see  all that individual's activities. This is good for people who use multiple docs, leave hearts, tags, etc. Similar to Craigslist "post and edit" email. The main problem here is that this could leave a door open for robo editing and DDOS attacks. That will have to be addressed with deep learning, I suppose, or there may be systems already available to mitigate, distinguish human activities from robot. ... 

😁 ACCOUNTPROXY TEMPLATE: Basically a metadoc of all the docs YOU are interested in or have created. The metadoc can then track those other docs relative to itself. So said metadoc acts as a proxy for an individual user or user account. If I go through said metadoc to access another specific doc the metadoc can record "my" activities thereon. It can also record "global" activities of all the docs accessed therefrom. I can see global activities (other users) of it's sub-listed docs, or ignore that and focus on my own activities which are distinguished by having come to them via this metadoc. This serves as the Client app! 

All a user needs to write down at home is 1️⃣ Editing ID (of this Doc), and never share it. We could even use a "brain wallet" type mnemonic word sequence generator, so user does not have to write anything down (four words is more than enough). A cool mnemonic generator would let me "freeze" words I like and continue hitting "new words..." until I get a set of words I'm happy with.

✡️ Code Of Ethical Technology:
  -profile use, not users
  -track patterns, not people
  -curate but don't exclude
  -be neutral, but not anarchic
  -no user accounts, if     possible. Let users keep their own accounts!
  -no cookies or trackers of any kind... Offer APIs
  -incentivise for what you want to see, charge a premium for what is a privilege, don't try to strong-arm behavior.
  -advertise in the context of the content, not the specific user!
  -Human first. Algorithm second. Let the person express what they want, make the algorithm reduce their workload. Never let the algorithms make the choices. (This is for a creative process... The reverse may be true for a security process, for instance.

DEPRECATED USE CLIENT OR METADOC INSTEAD 🍫 When you want to save your work, you are just downloading an 'output' product of the information ALONG WITH a cryptographic hash representing the unique document you have created. Maybe even a cryptographic hash of your usage history, ie what docs you have edited, and those edits. When you want to open the document again, you are sending the hash, we use it to identify the exact same doc. If other people have worked on it, we show you options and choices to view their work alongside your own. We use some AI and pattern matching etc to recommend documents that may be the same subject matter but further developed or with small unique additions you may be interested in. If you open additional docs (in new tabs) you can always 'merge' docs, 'merge selected' parts of docs, or simply copy-drag parts from one to another. Just remember, anyone with that hash can edit that doc... Which isn't a big deal, every doc retains it's own history. So you don't really HAVE to save a hash, you could just use the history to go back to where you were.. 

• #DEP# The only way we identify a "unique" user is by a hash. And really it's "unique user•document" since a real person will have many hashes from editing many Docs.

• CLIENT: Ah ha: anyone can build a SuperDoc user account "client"... A tiny simple program that stores ID Hashes, and even history [bookmarks to points in time?]. That way a unique user can always access their own work. We can build a simple basic robust open source client program... And leave it to others to build more elaborate clients and integrate with other software. These clients may not even need to access APIs, because all they do is store a lot of doc ID hashes and etc (and  store Output Product type docs; PDF, HTML, vector, etc) The client just has to retrieve a doc any time, not load or edit in any way (that is ALWAYS done online). Of course, no one has to save anything if they don't want to. Anyone at any time can always access, view, edit, and publish from (output), any Doc or any node whatsoever. Users can always WRITE IT DOWN (like, on paper) the hash thingy, that is. The only thing that might be handy that would expose someone to some potential direct association with specific content, would be a sort of My History function in a client. This would make it possible to view "my thumbs up activity" for instance. This could be password protected on the client side, and if you want more security, just download a few random usage histories from random other users, so yours is meaningless... 😁 Or, as above, there's a Template for that.

🍇 Diagrams and even animations of the history of the state changes, with branching and merging and unique users with color coding... This can be made available to the user, but is also how our algorithms find you the best version of your knowledge.

🃏 from any STATE of any doc anyone can generate a Sharing ID as well... This is how docs are usually shared. The Sharing ID represents a specific state, so the sharer knows what they are sharing will not have changed. In fact, the Sharing ID is always available in a box at the top of the "share" drop-down menu. 

🍀 The Sharing ID has four parts: the nodes and their data, the styling and sub-styling, the positions and space description, and the app configuration... HEADER, STRUCTURE, STYLING, CONFIG.

❓ So why do you need a private hash? 

❓ Maybe we don't. The main reason to have it is so a user can sort of "own" their own work. Maybe another way would be to let a user select something like "don't publish yet" or "not ready for prime time" for several days or edits or iterations. That way they could sort of save their work, or rather, at least finish it before everyone else gets to see it. In this case the hash IS private, or only revealed to the originator of the doc. But then, after a while, based on our algorithms, we just release the doc into the public pool. Sharing (via sharing the public hash) should be available while a doc is in this "incomplete" state, to foster collaboration and even limited-time insider proprietary treatment.

🍇 This is all closely related to VERSIONING, which is a big issue and a whole set of features in it's own right. [NOT SO BIG, REALLY] For one, we should be able to provide a simple and direct GitHub integration [BAD IDEA]... But more to the point, any doc should be able to self-generate an Interactive Version Control Diagram, which shows branches, users (how?), related docs, Knowledge Integration Phase, etc... All from the perspective of the current doc... You can navigate among docs from within the IVCD or the other way around. Major states are shown in the IVCD, and you can expand/drill-down to see minor changes... Each and every state is represented by a ID [OBVIOUSLY]. Even the tiniest tweak to the view or styling changes the ID, of course. Thus, no commits are required, because all changes happen on our cloud platform.

🍇 This ID based versioning will work best if there are two (or more) parts to the hash: one part represents the STRUCTURE including styling, format, structures, positions, sizes, templates, etc. Another part of the hash represents the data, including linking,interlinking, intralinking, markup, formatting, including the metadata: tags, flags, annotations, and all system metadata. Perhaps a third part represents the "location" of the SuperDoc within the whole ecosystem. [NONSENSE! METADATA AND LOCATION ARE PROPERTIES OF THE PLATFORM, SO DO NOT NEED TO BE STORED AS PART OF AN ID]

🐘 An implication of all this is that a) anyone with the Editing ID has the right to change the doc and thus the ID PERMANENTLY, and b) certain INTERACTIONS that record new information on a doc, even under the SHARING ID, also change the ID... So WTF? If I share a doc, how do I find it again? It has MUTATED! Aaaaaaah! Shucks, the HEADER. That defines a unique Doc. 

😕 So, I guess we need a 5th part to the ID, which is the HEADER, the entry point. The next four parts specify the STATE. And they may or may not be mutatable via interactions.

•Every time you open an existing doc, we show recommendations I.e. search results. And there is always the "similar docs" menu item, or 

Holey Shit• CONVERGENCE... just hit the search "go" button while some info is highlighted.. which searches for similar data in similar rows/columns on other docs. New doc pops up (in new tab of course) new info found is highlighted, ready to drag into your first doc. !!! ...ie Several cells are highlighted, ones that add NEW and RELEVANT stuff to the doc you are working on. When you drag them to your doc, the cells and/or rows/columns pop into the places they need to be, based on similarity to target schema. Of course search would be useless if it returned nearly identical info to what was used as the search parameters... What is needed is the relevant NEW info. Note: we should warn people away from creating very similar docs. And urge them to make their own unique thing. If two docs are similar, and the user essentially just merges them, some information is lost. There is less of a DISTINCTION. Two smaller more essential docs may be better than one big comprehensive doc. This will require a subtle algorithm... And maybe humans can help... When our algorithms see multiple similar Docs, a dialog could appear, saying "We see there are several very similar Documents. It is usually better to have a MetaDoc which organizes the subtopics, and make each subtopic more specific and distinct. We are happy to help you do this... Just click "yes" now to start the MetaMerge Wizard" and then show a 'loose' meta doc of column and row headings, ask user to select some to keep, and then same with cells... And then a 'tight' meta doc with the subcategories' Docs from earlier in individual cells, down a level. Humans could be trained to help with this, we could operate an outsourced work center, or try to do it through AMT. 

If we can make all that work, we will already be very close to defining a "knowledge integration phase" parameter. CONVERGENCE



• Ultralinks®: browser extension adds rich context links to text on any page.

• cottonTracks® "The Journal Of Your Online Discoveries"... A tiny bit of a competitor.

• ScissorsFly®... Online clipping and scrapbooking. Maybe defunct... 

#DEVS: checklist of agnosticism: backend is frontend agnostic◻️, frontend is backend agnostic◻️, AJAX is object agnostic ◻️, everything is made of nodes, everything is a plug-in, plugins can be coded and added to the backend and used on the other side of the world right away, any and any combination of databases can work, the app is infrastructure agnostic, the platform is infrastructure agnostic, multiple apps can access the platform simultaneously, plugins and components can be built in any framework, components can be migrated to a new framework, components and microservices and plugins and lamdas can be coded in any language and deployed to any branch on the tree, tests can be run on any code whatsoever, plugins are general purpose and can be instantiated special purpose, algorithms are plug-in agnostic and vice versa (i.e. an algorithm is like a plugin's plugin), algorithms can be switched out and A/B tested and defaulted to a rudimentary form, 


CiteEvidence® (founder Al Johnson) crowdsourced fact checking...

• Tagline: "Now YOU have the tools to organize the world's information: as YOU see fit, for YOUR own benefit, from YOUR point of view"

• Drill Down: drill down even further, and you get to the markup level... Remember, any data node can be marked up, using any markup language or even a combination of multiple markup languages.,

🏀 INTERACTIONS: that's what they are called. And most interactions are Widgets, but not all. And not all Widgets are interactions, interactions are things that OTHER users can opperate (anyone who finds the doc), whereas some widgets are only for use while EDITING.

STRUCTURES: MATRIX, BLOBSPACE, TEMPORAL, GEO, NODENET, AND TEXTUAL... but remember, these are really just different VIEWS or ways to look at the same stuff.


• Oh shit! Very important feature: FILTER WIDGETS... When you build any comparison table, you (another user you share it with actually) needs to be able to filter how it is displayed. In most websites, the filters are off in their own div on the left, which usually floats along. Maybe ours could be in their own cells (many filter buttons can fit in a cell, depending on the size.) This way, filters are just more interactive objects users can put in cells. Perhaps filtering cells should have some formatting rules attached, like making them stay along the side or top and float...

• Ethical business practices foundation presentation: 1) We will NOT have any user accounts, nor track any individual user or address. 2) We will take every active step to ensure users are anonymous, from us and from each other. 3) Our content will be highly curated, to ensure quality, user anonymity, user privacy (anti-doxing, no IP addresses, copyright, etc) 4) Advertising will be in current local context, based on who use the internet. A tool for what the user is currently using, on our sites only, not based on any browser history or other tabs. No cookies either. 


• Locally Contextualized Ads: We will only host Locally Contextualized Ads such as direct affiliate marketing partners. Also, we will not allow our product to be embedded into other websites that TRACK their visitors [actually, no. That would be acting like a dictatorial bully. Instead, in the interest of keeping the APIs open, we can shame those who do track, and incentivise those who don't.] (All that after WE (the company) reach a pre-determined size threshold). Also, when a user initiates a SEARCH through us, we will give a strong warning if they are using a search engine that tracks them, and encourage them instead to use 🦆 🦆 Go.
    
• Actually, I can think of plenty of situations where it would be useful for cells to be resized independently of the row and column. If there are columns basically unconnected to each other topically, but you want a neighboring column of cells to the left to identify the right hand cells, ie a new column of heading cells. In Excel this is done with empty cells for the margin. But it might be nice to just have some margin, which could be filled with art or colors. [later] In other words, the BORDER of a cell should be editable, each of the border's curves in fact. In other other words, the GAP should be non-uniformly scalable. This is how a rectangular cell can be changed into a blob. And a table of boxes can be changed into a BLOBSPACE or vennspace. 

🌶️ Holey shit Batman, check out parabola.io... 

🍿 And Smartsheets is a pretty decent looking project management platform.

📈 Data Vis: Flourish, The Data Visualization Catalog, Visualoop, infogram, reflect.io

🦄 The fruits of an effective search = information+facts+data+sources. The fruits of an effective research = Organisation + Verification + Communication (knowledge).

🎙️ In this information age, the meaning or definition of the word 'research' is in need of updating. In the not distant past, internet really is. A tool for gathering raw information, finding information, searching for data, searching THROUGH information was in itself a big job and took time and skill. And now all our current dictionary definitions of 'research' include, and even rely heavily on, the concepts of searching, gathering, and finding. However, in the information age, information is certainly easy enough to find, gather, accumulate. So now we need to make a DISTINCTION between search and research. It isn't complicated. Search is identifying, finding, gathering, resulting in an accumulation of INFORMATION or DATA. Research is organizing, sorting, verifying, rejecting, filtering, preparing, reformatting, restating, and making ready for communicating, resulting in an accumulation of KNOWLEDGE.

It is essential for us to start in the market sector of the 'basic common everyday consumer'. This is where the hordes are, this is where the numbers are, this is where the money is... But also, this is where the revolution is. It's the everyday ignorant masses that are desperately eager for tools that give them power. That is the secret to the current crop of IT Giants.. give the masses transformative tools, big levers, change them from the ignorant masses into sleek fast smart professionals. They are waiting for the levers that can help them turn the world's information into their knowledge. 

🖋️ If a picture is worth a thousand words, how much is an infographic worth? How about an interactive, animated, connected, real-time, self scaling, horizontally-and-vertically integrated, shared, secure, intuitive, flexible, dynamic infographic?

That's the future of GUI. 


©️ Original Content upload options include copyright/left services, watermark services, pruning/reduction services, and a search wizard to help identify the actual copyright holder (if not you), message them, and post accordingly...

📖 To be clear, the saved "output" documents are not static, though most should have a default static view that can be viewed with .PDF... They are dynamic and interactive, though no longer connected/online/live. Conceptually similar to 3D PDF. Perhaps a good file extension would be .iig for interactive infographic. (.iig seems to be available). Probably the best way to hack this is to have the doc export a .PPT. a .PPT can be opened by many client programs and has a lot of interactivity.

Also, a .iig static view (a .pdf) is the very same as a "print" view.

Also, outputs in general can be copyright of the user (if they can accept responsibility), whereas the normal online view is copyright of us. When generating an output, we add margins etc and a copyright notice at the bottom which includes all the various rights holders' notices.

🤺 Launch String Simple Markup: it would be nice, when starting a new doc, if you could put some intelligence right in the search terms: Harvard::Yale::Princeton starts a standard COMPARATOR doc  with rows for each of the universities and several standard columns like price, link, pic. Other types: wars=>Roman creates a timeline, Apple Inc # Microsoft # Google creates a graphspace, {(cats)(dogs)mammals} creates a vennspace with cats and dogs inside of mammals, {cats)(dogs} creates cats and dogs overlapping, etc. etc. And then we can always specify which named template/ wizard we want included, just append before or after with a ... , And if you don't know the markup, just use a name or alias ...Venn diagram... Cats, dogs, gerbils in mammals, fish, lizards, in pets. "US map: each sate: total highway miles" should, well, be obvious. 

〰️ And, of course, markup languages and markdown languages can be used throughout. 

🔠 In COMPARATOR tables and cross reference tables: 1.) It should be possible to transition from one type to the other, maybe with a nice animation. 2.) There should be a menu option (offered by the Wizard) that can "highlight correlation" and "highlight difference"... This should produce not a single shade of highlight, but a sort of color map with several shades showing significance. How many shades should automatically grow with complexity and/or size of data set (of course the colors and how many shades are defined in the stylesheet).

🎲 Don't forget, EACH CELL may have search terms in it's header. Though usually you would want them in the doc header.(for instance, I may want to use each cell to literally compare the results or effectiveness of search terms)

⛳ Column Group Sort: in a standard COMPARATOR, I may want to save groups of columns as a sort parameter. These would be shown first (to the left). This is very useful to communicate multiple target purposes for a comparison. There should be options to show the column groups as a SORT (each column unique, sort group first), or as ALTERNATES (each alternative shown as a set of columns with columns repeated as necessary). Example: feature comparison of LMSs like Moodle and Blackboard:  We may have different PURPOSES in mind such as one for a university students and one for company staff training and compliance. The two 'purposes' can each have their own set of feature priorities which we  select as a saved set of columns. For university purpose I want certain features first (grading, pop-quizzing), and for staff training we want other features first (certificate tracking,  drug test ageing)... And we can display simultaneously with duplicate columns to compare for all purposes, or sort by column set to show which product WINS for a given purpose. Sounds complicated, but it's simple.

Another way to conceptualize this: add metadata 'tags' to columns (in the top cell or other 'header') if a tag says "relevant to: PURPOSE" than that column should appear first (to the left) when I 'sort by PURPOSE'. If a column has multiple 'purpose' tags, than the column is duplicated for each. 

🔎 Search: classification tags: limit my search to a specified FIELD of knowledge... For example, compsci, ag, botany, sci, engineering, mech-engineering.... These can and should come from some classification system, by name or number. But probably only the top-level classification classes should be used. Or maybe not... Or maybe this is a stupid idea.

🏛️ When switching Model Type (for the first time) (like from Grid to VennSpace) there should be a dialogue prompting you to select options. The options specify relationships (most importantly), and other settings like formats, templates, and styles. And of course, the menu for changing these later is always available.

🦄 Check out/investigate SCRIMBA. How did they build this? What technology is being used? (One founder is named Per Borgen) [update he he,... It is built with their own framework called Imba]

🔘 Drop Target and drop dialogs: when I drag information in off the street, I should have several obvious places to drop it. One, there should be a 'drop
target' somewhere (probably above A1), this can be used if I'm not certain/confident where else to drop. Two, the preferable drop point is into a row header cell. If I know the info should go in an existing row, I drop into that Row's header cell. If I want to create a new row with the info, I hover between cells to open a new row, and drop. If I think the info goes in a new or existing non-header cell, then again I can drop into an individual cell. Or hover to open a gap (creating a new column or new row of course). However I drop info in, there will be a bit of a dialogue to confirm it is parsed how I want it and put into the right places. If I use the drop target, that means I have the least confidence/want the most help. So in that case a modal window opens with the incoming info parsed/arranged by machine best guess. In this window I can easily drag/drop to rearrange and select/deselect options like 'create new row', thus correcting machine's best guess. I can also discard unwanted data from the info. As I manipulate the info in this modal window, the table is also visible behind, with connecting lines drawn over to show where the new info will be going in the table, and cells highlighted (for existing cells). The dialogue is a bit lighter when I drop into column or row headers, because my confidence is higher. The newly created/modified cells are highlighted ( maybe until I commit the changes (cell-at-a-time or column/row-at-a-time)). Now the really important thing here is that the machine's guessing pattern maps are getting better and better the more info I bring in and the more I correct it's matching guesses. Also, as far as UI goes, if I drop nowhere in particular (such as the browser's tab), the same comprehensive dialogue should open. If I am trying to drop in a specific cell (or gap) there should be a clear hover-time action, visual confirmation of target aquisition, and maybe cell-level drop targets. 

📜 Codebase tests: project is to develop SOFTWARE, not just an app. I would like tests to show: How many micrservices/lambdas exist/are deployed. How many API calls, of what types, last time called, age/version of source? Lambdas/microservice auto deployment tests: can a single "BUILD" command select the right microservices/lambdas, containerize them (and otherwise prep them for deployment) automatically find hosting services, find alternative hosting services (by cost, etc), activate the hosting account, and make them live?

And I want the front-end to be back-end and database agnostic. And the back-end to be front-end agnostic. And the database APIs to be database-paradigm agnostic. And everything broken down into language-agnostic microservices and lambdas which are self-deploying and host-agnostic. And the tests should have tests, and there should be a load of integration and availability tests, and all the tests should show on my dashboard.... Basically so I don't have to have any other employees ever. 😁😁😁

💠 Conceptual: What defines a particular "document" as distinct? It's header. A header specifies a collection of data in cells FROM ITS POINT OF VIEW. A header contains a name for the document. There could be another document with all the same data in all the same cells, but it is another document because it has another header. The two distinct docs have unique IDs. Obviously, we wouldn't want to store all the data twice, we just set up relationships amongst nodes including header cell nodes. 

If Document X has a cell that is actually an entire document in it's own right, Document Y, then from the perspective of X, Y is just a data node. The cell in X points to the whole of Y, but usually what we want to see in X's cell is a "sight" or "result" or "slice" of Y. A slice remember is created by "drilling down" and "scoping up". So from the perspective of X (stored as metadata in the header) there is  a pointer to the whole of Y at said cell, but also a specification of the "slice" to be displayed as last saved. Nodes within nodes within nodes within nodes.

🖼️ For a picture collage, it is fine to use the grid for basic adding/ordering. But an EXPORT of this should not be limited to rectangles and rows and columns. The Template's main view should be an "albumspace" that starts off as rows and columns, but the cells have handles for changing their shape, and they have a z-depth control so they can overlap, and there are special border styles and photo effects. There are controls for "layers" such as "show effects" and "show border effects" to make a better workflow. Of course, all "special kinds of spaces" like this have their table form, but, in keeping with the principal of WYSIWYG and not having separate views for creating and viewing docs, we need to be able to edit collections of images in a free-form space. 

💸 Monetization: Embedding is free... In many cases. Buuuut, if your site is any kind of e-commerce set-up, then you must PAY. Can we detect e-commerce sites? Can we detect when one of our docs is embedded? Of course we can. But it should not be another API or CDN situation, websites should be able to download and use an embeddable doc. Of course, an "embeddable doc" is a type of EXPORT, and doesn't have the full functionality that the doc had on our system. And then again, there may be some free EXPORTS that are simply HTML/css, in that case they can be embedded anywhere. 

After all, if you want to be awkward, the system can be used as a sort of a text editor... I.e. with templates like "ESSAY" you basically assemble the essay as an EXPORT from bits and pieces in cells in a table... Soooo... why couldn't someone create a template that helps them assemble bits of code into a website?... Or a program? It could basically be a weird kind of text editor. Might be handy, I guess, since cells can work as nodes and connect to other cells... Oh good grief. 

🚫 No, there isn't a template for To Do Lists. For shits sake.

🚫 And no, there isn't a template for "project management" or a "kanban". For fucks sake! Of you want to make this crap all over again, that's your choice.

👓 Drill down/scope up: Maybe when we are "selecting scope" in the maximized (drilled-down) cell, the expanded cell should be in a modal (as Sergey had it) and above that there should be a small representation of the resulting cell also as a modal. All the rest of the doc is in the background, shrunk a bit, and overlaid by a transparent gray margin of the modal. This way screen real estate will be optimised. But instead of ONE result preview cell, there should be about THREE; one for each responsive break point. Yes. This way I have a crystal clear view of what I am doing. The smaller "preview cells" can show overflow state by having a grayed-out content fading out around the outside, show UI responsive change (scroll bar, arrows), and can show full styling even though the drilled-down cell is showing source data in its source form.

🗒️ Shitfire: Menu ribbon? What? Menu ribbon tabs could just be another doc! Let's say the menu item for Templates: it should just open a doc in a tab that shows all the available Templates on nice cards with pictures and nice descriptions and you can maximize for longer descriptions and move them around. Same goes for Styles. Same goes for Exports. Yeeee-Haw!!!

🦄 This may indicate a special type of Template: a meta-template? that has particular kinds of interlinking with other docs... Or maybe this is just a special Template, not a special TYPE of Template.

⁉️ Templates should have their own "Help" menu item. Under the Help menu there is "General help and how-to" and there is "Help for this Template"... In any case, Help is another Doc (of course!) For "Help On This Template" there will be rows like "Common Q and A for this Template", in a cell in that row there would be a common question, and if you drill down into that cell you find a Doc of all the versions of that question that people have asked. And in the "Answers" column you will find an answer from a Platform Moderator if we have added an answer. Likewise, in a row of "How To Use It" you will find user-added how-tos and usage examples (that have been approved by a Moderator). And another row may be "Improvement And Feature Suggestions".

🍷 Embeddable docs act as a cloud hosted CMS. Anyone with the Collaboration ID can modify the content. This is why it would be good to have a secure native client that stores and accesses docs by their ID (docs are only edited in our app, even offline in the PWA). But the question is: Do I have to share my doc with the world? YES. Unless you buy a Proprietary License for the doc of course. The handy thing is, all we (the company) have to do to keep it proprietary is NOT release it into the pool. You don't need an account with us, you can buy a Proprietary License for ANY unrealeased ID on our e-commerce system. All you do is start a new doc, copy the ID, and visit the Proprietary License page and buy it. Maybe we can build integrations for Dropbox, even your local machine, if you would rather the data was not stored on our servers. Of course the doc can only be edited in our app, and we have access to all the structure and form if not the data.

🥕 Data: Hold on. I would like the essential unique data (URIs) to be a node itself, composed of sub-nodes for each data point. By data I mean the actual content (scoped) paired with it's source (URL). And of course often a DATA node is just a link/URL. Since I may be storing the DATA elsewhere (my own DB), then that means it has to be an EXPORT. It could just be JSON or suchlike. Of course our app only let's you export the DATA if you have a license, ie DATA export and import only works in a doc with a Proprietary ID. When I use the ID client to open a doc with a Proprietary ID, the client also tells the main app where to look for a DATA object node. So in the ID client, I need to associate each Proprietary ID with a location and optional SSH key to access the DATA object node. Alternatively, I can open the app first, with no DATA object node, and then enter it's location and key from within the app. Note that I can open a doc, even a proprietary doc, with no DATA object node... It is just the template, structure, form, wizards, empty widgets, styles, etc. with no DATA.

😞😞😞 The Big Dilemma: [if]Docs in the global pool are open and fully editable. If I want to edit an existing doc, I just get the Editing ID from the "share" menu, and copy it into my Client Program; in other words, I share it with myself. Then, every time I open a doc with that Editing ID, and make changes, the changes and the history are part of that ID. At any time, I or anyone else, can create a new ID from my doc, effectively cloning it. Anyone with the Editing ID is a collaborator. (There is another "Sharing ID" that gives access only to the static/un-editable version of a doc. (This is not an EXPORT, it can only be opened in the app))... The huge problem here is that there will quickly appear hundreds, thousands, millions of clones. Everyone will want their own version. As well they should! After all, the point is to organize the world's information from MY OWN POINT OF VIEW. The problem with that is: similar clones will have information "siloed" apart. People will have to go search the internet for new stuff, even though it is certainly already on a closely related clone. Then we have created TMI all over again! It would be possible of course to develop sophisticated algorithms to help people find knowledge and info on near-by clones... But there again that leads to a machine telling me what knowledge and information is good for me. And THAT should be avoided at all costs! We are the Un-Google! People need to decide for themselves what is important to them. (Case study: "My favorite Chinese restaurants in SF") DIVERGENCE 😞😞😞

🏗️ Edit: let us call the ID for the fixed/non-editable version the "Sharing ID" and the "Editing ID" is the whole doc with all its functionality.

😒 One weird, possibly bad, ramification of this arrangement is: when I find a doc by searching the global pool, it will likely be currently actively BEING EDITED by many other people. Because everyone has edit rights. Therefore it will be very hard to even read the doc, it could be a blur! If instead I see a static snapshot of the doc, then surely there must be millions of possible static snapshots. Either way, very difficult to search and find a doc. Alternatively, if we make it so that when I start making edits on a doc (that I found through global search), it immediately "clones" and now has a new unique ID, then again major DIVERGENCE. Bummer.

🤕 On the other hand: what if we make it so that the docs in the global pool are identified by their "Sharing ID"? Then they are basically static. This would dramatically slow the velocity of change of the whole docosphere. Then, for divergence to rear it's ugly head, I would have to actively "clone" a doc by generating an "Editing ID". Further, if we really relied on the temporal buffer of the "not ready for prime time" program, things start to look fairly stable. Hmmmmmm.

🕺 That would suggest we should really develop the "not ready for prime time" program. It could certainly use algorithms to actually discourage me from "releasing" into the global pool. And of course algorithms to help me  build it out to it's   full potential, bring it to a threshold level of "knowledge integration", and frequently show me other (released) docs that I might want to borrow from. 

🙈 One implication of relying on the Sharing ID is that it means anyone with the Editing ID can choose to "release" the doc into the global pool. Perhaps we can simply warn of that fact next to the display of the Editing ID (i.e. in the "share" menu) Or perhaps we could suggest/require a consensus from multiple people who are editing. Holey cow: WE WILL KNOW how many people are editing (approximately) even if the original creator doesn't. There could be a feature: near the "release into global pool" button that shows about how many other people are actively editing, and a means to request their consensus to release/check for objections to releasing.

Wait a second... Maybe when an Editing ID is generated, it could be given a lifespan limit, or a limit on number of IP addresses that may use it... And if that is possible, then it must be possible to "revoke" or control who/when/how other users are editing "my" doc... Maybe other users each get their own Editing ID, and they have to make a pull request to merge their changes.

Oh fuckit. Why not let me generate multiple Individual Editing IDs from my doc, give them alias names (Mr. Brown, Mr Pink, etc) for anonymity, set specific rights and limits (time limit), give me a means to revoke/cancel/extend individual IDs, and then let me have an interactive map of the edit history of each ID and let me treat each ID's edits like a layer and hide/unhide its contributions, and even unilaterally and selectively merge their edits from my end, or give the ID's merge rights. Of course I must transmit an Individual Editing ID to someone myself, i.e. by email. The only thing the platform knows is which Individual Editing ID is connected to which Doc.  Also, a feature that let's anyone "request edit rights" from my (non-editable) doc in the global pool, which causes a message to show up on my original doc and then I can give that anonymous user temporary limited edit privileges (the newly generated Editing ID is conveyed directly to that person, they are anonymous to me, they need to copy it into their Client program). And of course ID users can communicate to me to request a time extension by alias. (GUI? A doc in a tab, duh. p.s. These special tabs for menus such as a "messages" will have an icon in the tab and a unique color.)

👶 Eegads! Okay... 1.) All Docs are shared in the Global Pool by their Sharing ID, which means they are not editable. They can be "operated" of course, according to how they were made (I.e the interactions work). 2.) Anyone can "clone" any Doc from the Global Pool. When a Doc is thus cloned, it has an Editing ID, with top-level edit rights. A newly cloned Doc is not released into the Pool. The "owner" is anyone with the new Editing ID. If the "owner" wants to share it, they can get the Sharing ID  from the Share Menu. If the "owner" wants collaborators, they can generate any number  of Limited Editing IDs from the Share Menu (or share their Top-level ID, which is a TERRIBLE idea). 3.) When the Doc is ready, the "owner" (i.e. anyone with the Top-level ID) clicks "Publish", and then WE get to decide if it is ready to be released into the Global Pool. 4.) There is no "pull request" for docs you clone in the Public Pool. If you want some parts of another Doc, just clip those parts like anything on the net. If you are working on a doc under a Limited Collaborating ID, then you may have a "pull request" button and more, according to what options the Limited ID was given when it was created. 5.) Creating a brand new Doc is exactly the same as cloning from the Global Pool. If you copy everything from a Doc, then create a new one, and then paste it all in, you still have a nice new Collaborating ID, see #2 above. 6.) We, the Platform Owner, will release a Doc into the Global Pool whenever we damn well please. That could mean BEFORE you hit "publish", and it could certainly mean it doesn't get released when you do hit "publish". We have a WHOLE PROCESS: vetting, legal, quality, originality, Knowledge Integration Phase, etc. 7.) You can always Share a Doc and/or get Collaborators, regardless of whether we release it into the Global Pool. Just generate an ID and email it accordingly.

🏓 Hmmmmm. Maybe the way it works with interactive "menus" opening in tabs and looking a hell of a lot like another doc... Is, it IS another doc, but a doc with an Editing ID with full permissions (which includes config and settings) for the aforesaid doc. In theory that means this "menu doc" could be open across the world. Hmmm. that might be cirular logic. And a security vulnerability... 

🙉 And of course, if I am unhappy with how others are editing "my" doc, or am surprised how many people seem to be editing, then I can just generate a new Editing ID and go from there with no collaborators. Sharing an Editing ID cannot be revoked, because I don't own the doc, don't have an account. There could be a feature to enable communication among editors, or we could just use some cells.


👶 So then, if it is the case that docs in the global pool are static... Then when I go and try to "clone" one (by creating a new Editing ID), I should be encouraged to peruse a number of similar docs, and pick and choose from them any rows and columns I may want for my new doc... YAY! Back to CONVERGENCE!

🌲 Switching from vertical layout to horizontal should be quite easy with tree-structured/hierarchical data like family trees, file trees, org charts, bifurcated keys... (Motor/generator characteristics/features/selection could be a tree)

🎩 Wizard/Template: "JOURNEY": helps compare options for going on a trip. Flight v train v drive? Travel time v cost? People, sights, itinerary, business/pleasure, This is an example of "composite" or "synthetic" products being compared. Also a good use for an input widget to get votes from your friends who may come traveling with you (share them each an aliased ID). If you arrange the cells and widgets right, each sharee can vote for or take responsibility for a whole row or portions of  work. Good organizing pub nights, volunteer efforts, task planning etc.

🌿 Branch.io provides "deep linking as a service", devs use their apks to build deep linking properties into links. That is great for them, but doesn't give the average regular consumer much of anything. The content and flow of internet use is still and even more so, controlled by the publishers. It is a vertical, inside-out model. How about let's build a horizontal outside-in model: A regular user should be able to deep-link to anything they come upon on the net or in an app. They should be able to add their own notes or comments or tags or flags to that content. They should be able to index that content as they see fit (for searching) or use an indexing service of their choice. They should be able to search for content based on "importance" as determined by these activities from themselves and others. Let's call this set of features "deep bookmarking" and "deep social annotation". (A browser or plugin could do this just fine).

☺️ The Global Search Importance Ranking Algorithm should be public, with all the individual WEIGHTS for each importance factor easy to see and understand. And any other background algorithms that we can make public, we will make public.
   
📝 "Publication Pester Dialog" a plug-in that checks with the user at certain times to see if the user wants the Doc to be released into the Global Pool. And reminds them that it is up to us not them, when and if the Doc gets released into the Global Pool. It would have a logic flow like: "Hello, do you think this Doc is ready to release into the Global Pool?... A)Yeah! ; B)Still Working on it, ask me again in a)1 week b)3 weeks c)2 months.; C)I would like to keep it private.. ; D) I need help finishing it up... This is activated based mostly on Computed Readiness, Time, and User Activity; pre-review. Once the User hits "Yeah, publish!", then it may go to Moderator Review.

And then another dialog plugin to just let the user know that we ARE going to publish, with similar options... This is activated based on Computed Readiness (complexity etc), Moderator Review and Recommendation, Time, Uniqueness, User (originator) Activity, Collaborators' Activities, etc.

📣 Author: No, there is no place for you to put your name on the Doc you created. In fact, we will rigorously police the platform to make sure users do not "sign" or claim ownership or authorship. We are the copyright holders of the Doc. If you want to "own" some of what you create, then make an Export. Most of them can be signed and copyrighted. Also, if you buy a Proprietary License, you can create cells/fields WITHIN the Doc to show your name. And, if you EMBED a Doc in your website, you can put whatever you want on your own website, of course. That's fair. (There is a Dialog Plugin which explains all this if you put a full name or a field such as "author" or "copyright" in a Doc.) If you want to Share a Document with a known friend, do it by email. If someone shares a Doc with you under an id with privileges, than you can be pretty sure they created it (well, they have

🏘️ Perhaps a Document originator should be able to retain editorial prerogatives indefinitely, even when it is released into the Global Pool. For instance; I make a Doc that has the "Add a row" widget enabled, so anyone who finds it can add a row with the same columns in order to give their review or whatever... It would quickly turn to crap if someone didn't moderate and edit it. The original creator should take that responsibility, ideally. And instead of just deleting crappy content, it would be nice if the editor could select "not a good fit" or something like that, so whoever added that content could get notified and do something else with it. Also, the OP should have an option to ask us to take over said Editing duties... Or we could just take it anyway.

😎 Or, maybe the originator MUST retain moderation/editorial prerogatives... And if they are slacking, we bug them and remove from global pool if lots are using... Originator can certainly hand it off, just by giving away

[Surely there is an API to distinguish human vs robot users] Pre-publish filter: Whenever a user chooses to "publish to global pool" the doc first must go through our algorithmic content monitor, AND a human moderator. Ideally the algorithms are sophisticated and based on "entropy" and such so they can determine a docs level of "Knowledge Integration", not just foul words. But to start with, we can apply a simple heuristic: the doc has been modified more than once with more than three hours between some two sessions of work, the doc contains more than two rows and more than two columns with more than two types of data in cells... Stuff like that should slow down some basic botnet attacks.

examples/product comparisons... That is not a flaw of the internet, that is the internet. Anyone can publish any website they can imagine, and it is their prerogative to share the things and relationships that they are interested in, and to try and make money therefrom if they want to. That is great! Maybe I was a bit harsh on potentially "biased" media publishers... What they do is fine,as far as it goes, but is is every individual person's prerogative to choose the information and knowledge that others are happy to share, and then form their own knowledge therefrom, applying their own choices and biases along the way. I'm not saying I am building a tool to reinforce bias, but I also don't want my tools to tell me what is right or wrong. 

...plugins/parsing and scraping... Often a named template is really just a set of scoped scraping/parsing plugins. They may swing both ways: parsing your doc to figure out what your categories are, and then parsing page data to find objects to put into your categories.

ALIGNMENT: yer basic 3x3 grid to help sort out who is chaotic, who is evil.

🔫 A cell can contain a list, of course. A list can be numbered or bulleted, obviously. Each item in a list is a sub-node of the list, clearly. Therefore, each item in a list can be CONNECTED to any other node, no doubt. When I "drill down" in a list, I see the list item sub-node and any external connections each list item may have (or they may have been typed in manually). When I Drill Down on a single list item from here, I get to the source for that list item if it is scoped up from outside. For example, when I build an index, glossary, or lexicon from a document, it could be such a list. And drilling down two levels like that on a list entry, brings me to the said document centered and focussed on the word under consideration. ... Now how do I build this kind of index from the other direction, as I am reading the document? Just drag and drop, as always. Because, newly created nodes keep a connection back to their source, of course. And drilling down is how you get back to a source from a node. THIS EXAMPLE is crucial, and must be executed soon as part of any POC.

☦️Menu and Workspace Layout: By default the  page is split horizontally, 20% at the top for the menus, and 80% at the bottom for the workspace. The menu area is organized into tabs, as with MS word. The workspace is organized into tabs as with MS Excel. Of course, the dividing line can be moved, resizing each. And each can be SPLIT vertically, so more than one tab can be seen at a time. Once an area is split, it might be nice if I could resize the area horizontally, overflowing off the side of the screen, in which case a horizontal scroll bar appears.

"All wizards are plugins, but not all plugins are wizards"

💈 Wizard: CONSISTENT STYLE RULE HELPER: Lurking in the background, this wizard waits until you style two nodes or objects similarly, and then pops up to ask if you would like to create a document-wide rule, or a node-wide rule. For example, a glossary (list) cell may source from several web pages, and each time you add a glossary entry, you style the source word (yes, on the external web page (in our iframe)) highlighted in light blue (the same light blue you happen to have chosen for the background of the glossary cell). The wizard would create a rule from that, so next time you drag/drop a word into that particular cell, the word back on the source gets the same style applied automatically. And you could have multiple list cells in a doc, each with a similar rule, but it's own color. So when you read across the web pages, the relevant words are highlighted according to where they were copied to. (V3.0: It would really be amazing if, when a wizard like this wakes up, your mouse cursor freezes into a glowing orb, it's icon appears and animates in the header header, and after the wizard's dialog runs (assuming an affirmative response to continue) the wizard actually takes control of your mouse and shows you how to build and apply the rule script.)

⚗️ BACKWARD-FACING MODIFIER NODES: As a user who clips stuff from the web, when I "drill down" to see the un-scoped source of a web clipping, I may want to add certain markups or annotations to that un-scoped source, such as highlighting words that I use in my Doc, so that I can see the most relevant parts of of my sources.

🔬 SCOPING: This probably goes without saying; when drilled down (in the maximized view), in most cases, I select SCOPE by the normal method of text selection or by dragging the borders of a selection rectangle tool. If I want to select multiple portions, I hold down CTRL or click "new" by the tool's button. When I then "scope up" to go back to the Doc's workspace, if there are multiple parts to the scope, then they are partitioned by ellipsis marks (...), which I can later delete. Why? So that I can see the clipped and stitched Frankenstein I created!

💦 VIEW/FIT: "Fit and flow" slider control. The slider is labeled "pages", its range depends on the size of the doc. Below that is a slider for page sizes (letter, a4 etc). And there is a graphic of boxes representing the pages. Below each box is a toggle to switch any page between portrait and landscape. This function is a big fat shortcut for getting a doc ready for export to PDF, or just for visually tightening it all up. After this function has been used, the  doc ITSELF is divided, adhering strictly to WYSIWYG principles, so you can rearrange things as much as you like on the pages, and then tweak the "fit and flow" again...

FIT AND FLOW: I also need a range slider from "tight" to "loose": this simply adjusts the GAP. Next to it I need a button to "re-conform all irregular gaps".

||| Uh, does that mean we need a "page break" object in the "insert" menu? No! That's not WYSIWYG.

👓 Speaking of WYSIWYG, I guess the STRUCTURES don't really exist. They are just styles after all. And there are thousands, for a complete list see SmartDraw. In other words; the structures are just different diagrams and visualizations and infographic representations of node graphs That is WYSIWYG.

🐾 Therefore, the IDs should definitely be broken into multiple parts. First, the collection of data nodes, sources, and formulae (this includes all sub-nodes and sub-node's inherited styles). Second, the spatial arrangement/interconnections/pages. Third, applied styles. Fourth, app layout, plugins, etc. 

🍗 MENUS: When working on styling inside a node on a sub node such as text or or pic or vid, the MENU for the styling (i.e. text formatting, styles, art) should pop up in a new node  outside with a connection line to the sub node being styled. And if there is pre-existing styling (from the source), then that should be in it's own node so I can see how all the styling got there, and change it. When we have a MENU in a styling node, we are really adhering to WYSIWYG principles! The "styles" node shouldn't just SHOW the applied styles, but should itself be the means to change them, i.e. it is a MENU. Or you could call that a widget, or whatever... It's a node. 

😀 MLP/beta release: When dragging/dropping using LMB from one tab to a form field in another tab, the origin styling is normally lost. Therefore, the app should simply read the CSS of the origin site, and re-create the styling. 

😀MLP: Also there should be continuous auto-save. And content filtering, including personal info such as names and doxxing, and IP control filtering (MLP not MVP). 

💌 Don't forget, if you have an Editing ID, you can email content to the Doc: 45692editingid5621@knowledge.com
It will try to parse the content, or just save in a node. This is useful for when a third party app (YouTube, news, etc) has a share by email feature only.

❓ NODES: there are four kinds that we will deal with on development level. A DOCUMENT is a NAMED COLLECTION of CELLS. A CELL is a holder for objects, only one of which is that cell's primary object, other objects in the cell are directly related to the primary object such as metadata and controls. An OBJECT is a single item such as a string, multiline text, an image, a form field, a widget, an icon, a vector graphic, a link, etc.  A MODIFIER is a node that defines modifications applied to objects: styles, crops etc (for images), position  (for a audio/video player control). 

So what about lower-level nodes? What if someone wants to add different styles to each letter in multiline text object? Since all objects are nodes, we should be able to add as many points as we like to the INTERFACE of a node. So the connection from the modifier node to the text node could connect to any single bit or any collection. Otherwise we might need to spawn a new object node whenever a sub-node is treated as an individual. (P.s.  In this case (a multiline text object) the modifier node can be a whole style SHEET, so it can modify many different parts of the object, based on styling rules.)  (P.P.S; This whole modifier node and any style sheet therein is generated by the app from a WYSIWYG text editing menu, not created by the user as a style sheet or node.)
 
How shall the program determine the INTERFACE for any node? Modifier nodes should define and create the needed interface on a target node.

🏝️ There are exactly 11 objects that a CELL may hold: the cell's primary object, a title/heading overlay, an SVG overlay layer, a fill/background, an audio fill, a tooltip, an alt text, an array of tags, an array of flags, an array of metadata and it's meta-metadata (search terms, dates, sources...), a controller widget, and an INTERFACE (which isn't really IN a node, but attached to it...)
   •Only the primary object may be SCOPED
   •To work around only one title, use TEXT tool on SVG layer
   •Certain primary objects have a rule to exclude certain other objects from the cell: a LIST has its own title (optional), so excludes a titling block... And more
   •There are various special rules and special objects. That is, each kind of object has rules.
   •Modifier nodes are not objects, duh. So styles and etc are not IN a cell, but rather connected to its interface.
   •A cell's controls/menus are not IN a cell either. They are used for adding objects, modifying objects, moving cells,  drilling down/scoping up, etc. 

😈Tired of all the lies, spin, propaganda, and fucked news? Sometimes when you read the bullshit, you just don't know what to do. You'd like to comment on a piece of garbage article, but either there is no comment feature, or the existing sheep herd of idiotic commenters are not aligned with you, so either you are opening yourself up to being trolled or you are afraid others will see you as a troll. Well, using the platform, you can  effectively ANNOTATE a website or document in a few good ways. Then you can release it into the global pool, put it on your own website, share it, etc.

🐦  RAMIFICATION: Social annotation of the internet and of individual documents/websites on the internet. (Fair motherfucking USE!) 

🆎 DEV: Is it possible to automate A/B testing? To drive toward a goal? Say I want all controls to receive equal use/clicks/heat... Can I set up an automated A/B testing campaign where positions, sizes, colors, labels, names, etc are all varied procedurally and selected evolutionarily. Maybe a "genome" of the UI could be created, and mutated, and selected in real time by live aggregate usage in the wild. Could Jenkins do this? 

🍝 The CONTENT RULES for the global pool will be a large complex system. Some rules will be to ensure high quality, such as Knowledge Integration Phase. Some rules will be to prevent filth. Some rules will be to save space in our servers/database, such as rejecting WikiHow material and other junk from websites that already offer related services (of course you can have that content, but there must be some SYNTHESIS, not just copies). In the beginning we must implement some simple heuristic algorithms for security.

🛵 ? PWA: speaking of junk we don't want clogging up our file storage... Later, in v2 or 3, should we make it so that the APP is effectively just a CLIENT for a service that helps you create and maintain your content, but you can set up your own database and file stores.... That way you can have proprietary, naughty, or bulky content, and do with it what you will. 

📖 Uh, or not. Probably just open source the whole thing. You can go build your ownses.

🔌 PLUGINS: Don't want it to be a web clipper? Just want the graphical spreadsheet type stuff? That's why every thing is a plug-in. All the web clipping functions are plugins. Want a bunch of keyboard shortcuts? Plugins. Want specialist parsing, ML, scripts, or formulae? Plugins. Want your app or API or service to play nicely with ours? Plug it in.

🔮 Want a brilliant model for a "WIZARD"? Check out Orca3D.

🎃 Ads: clearly we cannot allow people to put ads onto our platform. But there is also a very legitimate use case for people wanting to compare, criticize, annotate, organize and collect various web ads. So we must have a special set of rules and templates and oversight for ads. 

🌐 WHAT IT IS: The highest level of abstraction: 
   •Toolset to help people organize the world's information from their in point of view.
   •Toolset to turn Information Overload into Information Payloads.
   •Toolset to create Knowledge from information.
   •A RESEARCH ENGINE.
   •A PLATFORM wherein individual users create and store content.
   •A free and open platform of synthesis, discourse, sharing, discovery, and learning.
   •A web clipper, bookmark organizer,and social annotation platform.

The next-lower level of abstraction: 
   •Software for clipping and saving stuff from the internet.
   •A platform for user-generated content

 ‼️ Check out developer.mozilla.org/Content_categories... A comprehensive guide to all the HTML element tags. In theory, almost all HTML tags represent all the ways people might want to ANNOTATE parts of a Document. So these are a good study guide.

⤵️I suppose the "Drill Down" button should actually reveal a kind of menu when hovered, so I can go right down to the level I need. Which may be three or four levels down.

🥔 When I drop in an image or screen capture that contains text, it would be mega cool if the app helpfully offered to OCR  it and clip out the graphic parts and flow the text and match the fonts. And then create a new level (up one) so the original is the source when drilling down from the fixed-up cell.

📌 ❤️❤️❤️ Pinboard.in is a bookmarking platform for introverts. Great stuff. Full API, third-party clients, save tab groups, rss feeds, email to account,... It's like our SHADOW. (Another bunch of cool things we don't need to be is Airtable.)




👓 SPECIFICATION:
•WORKSPACE
•MENU SPACE
•NODES
   * HEADER/DOC NODE
   * INTERACTION NODE
      •FILTER/SORT/GROUP
      •NEW COL/ROW
      •PLAY buttons, WIDGETS
   * LIST NODE (not in MLP?)
   * INFOGRAPHIC NODES
   * OTHER "RESULT" NODES
   * CLIPPING NODE
      •PRIMARY OBJECT
Can be a WEBSITE_CLIP(with scope), a LINK(no scope), a DEEPLINK(is its own scope), a WORD_BLOCK(no scope, this exludes a TITLE object from the node), a MEDIA_FILE(with scope), an IMAGE(with scope), a TEXT_BLOCK(with scope) If it is a Web
      •TITLE Limited to three words(plus styling)
      •NODE MENU
      •DRILL/SCOPE BUTTON
      •MAXIMISE BUTTON
      •BORDER
      •BACKGROUND FILL... This exludes an IMAGE from the node. 
      •AUDIO FILL
      •CONTROLS
      •TOOLTIP
      •ALT TEXT
      •SVG OVERLAY
      •TAGS ARRAY
      •FLAGS ARRAY
      •METADATA OBJECT
      •RELATIONSHIPS OBJECT
      •CONNECTIONS OBJECT
   
•NODE SHAPING
•NODES: MOVING, SCALING, MERGING
•CLIPPING ACTIONS
•STRUCTURES
   •
   •
   •
   •
•INTERACTIONS
•DOCUMENTS
•DOCUMENT HEADER
•DOCUMENT ID
•NODE ID
•DRILL DOWN
•SCOPE UP
•METADATA
•"BUILD" MENU
   • Add search terms
   • INSERT objects in cells
   • Add TEMPLATES
   • Add PLUGINS
   • Activate helper WIZARDS
•VIEW MENU
   •STRUCTURE
   •FIT AND FLOW
   •STYLE MENU
•PUBLISH MENU
   •SHARE
   •EXPORT
•DISCOVER MENU
   •SEARCH (GLOBAL POOL)
   •KIP DIAGRAM
   •NETWORK DIAGRAM
   •RELATED DOCS DIAGRAM
      incl. "CLONES"
   •HISTORY
   •KNOWLEGE IMPACT
•HELP MENU IN EACH MEGA TAB

•CITATIONS
•SOURCES
•PERMALINKS
•CONTENT CONTROL (rudimentary)
   •USER FLAGGING
   •©opyright respect API
   •WATERMARK and THUMBNAIL COMPLIANCE
   •ANTI-FILTH API
   •NO FILESHARING
   •DOXXING, TROLLING, FLAMING
•GLOBAL POOL
   •
•EXPORTS (PDF  for now)
•BACKEND
•SECURITY
•MONETIZATION
•TEMPLATES (roadmap only)
•PLUGINS (architecture only)
   •PARSERS
   •WIZARDS
   •STRUCTURES
   •FORMULAE
   •INTERACTIONS
   •MENU ITEMS (TOOLS)
   

💾 What then is stored in the database? 1)Info Nodes (their IDs anyway), and they are used by reference in 2) Document Nodes. Document Nodes are an object containing references to all their Info Nodes plus any modifier nodes applied to each info node EXCLUSIVE TO THAT DOC (ie scopes, annotations), and also a Style Object, a Structure Object and a Config Object.

🌴 INSANE: TWO-WAY COLUMN SCALING: When I hover the mouse over the gap, I should get options to scale the left column or the right column...Or to be totally insane, even all-to-the-right and all-to-the-left as well. No. That is too insane!

🤔 If STRUCTURES are to blend together seamlessly, then there must be some underlying universal CONTINUUM. A GRID. But a grid that has special rules. When I hover over the gap to scale columns or rows, I should see lines that represent the current shape of the continuum. When a whole column or a whole row is scaled, this morphs the continuum. Likewise a cell can be scaled, and the continuum morphs around it. So when a cell is merged into a neighboring cell, they take on the underlying shape of their spaces in the continuum. An extreme example of continuum morphing is the GEO>MAP Structures: each region on the map should be bounded by a closely-matching space in the continuum. That way a nation could be scaled, stretching only the bordering nations. How far/fast should that effect fall off?

🔭 TEMPORAL SCOPE: When a user clips something that is in flux, like an RSS feed (or really anything on the net) they may want the live-and-connected ever-updating scope, or they may want a "snapshot". With typical "static" web content, we can just clip now and notify of changes in the future node when changes are available in the morning future. But with highly dynamic content the user will need to drill-down and specify a temporal scope or "snapshot". It need not be called "temporal scope", that could be confusing. They should just be able to tick a box "keep it live". For websites, that is off by default, for feeds etc, it is ticked by default. But what about a RANGE? I want to clip an hour of an RSS feed, and have CONTROL widget in the cell for my peers to peruse the feed across that time period. So I guess "playable" datatypes are a thing: audio, video, animations, feeds, live streams,... Yikes.

🙄 Okay, so User Generated Content is important: what if someone wants to give a long analysis or critique of some article they find online? Or what if someone wants to upload their own pics to fill in the gaps in a photo-heavy feildguide Doc? Then where does it end? What if someone wants to use the platform to store and share their data? Their writing? Their poetry? Their photos? Their blog? Why the hell not? This means the platform must function as a bit of a file storage... But everything is public! All of it is public! The only secrets are the Editing IDs. These may not even need to be stored on our system! And if someone loses their Editing ID, they can always find the same Doc again (in the global pool under it's Sharing ID) and clone a new version with a fresh new Editing ID. Done. 
But what about file piracy? Only DISPLAYABLE file types are uploadable, video and audio must be clipped and under a certain length, and you cannot download from the platform to your local hard drive. 

And what then if someone wants to upload tons of photos or video or audio to use our platform as their ecommerce store or storage Dropbox? Well, they can't. But they can host the content themselves, and link it on our platform. Our cells will only display a thumbnail or clip. The hosted files may not be available all the time if the users hosting is crappy. But the public can always see doc with the thumbnails. Any third person who wants to download the files must download them from where they are hosted.

👝 Storage by reference should ideally mean, that when two people upload (create) a node containing some portion of the SAME data (ie different parts clipped from the same website), then really we just store (archive) it once in our file servers, and create two unique references to the uniquely SCOPED data in our database.

😯 In the near future, the whole platform should be PEER TO PEER. Yes, like BitTorrent. Everyone will allocate a certain file space to the community. But it is encrypted, and no single WHOLE file is stored on any one machine. A certain number of peers are needed to access the whole system.

🦅 There are plenty of conditions on what the public can put ON TO our platform, but once we accept something, and make it available to the public following our vetting procedures, then there should be virtually NO CONDITIONS OR RESTRICTIONS on how someone else uses it. If an image must get a watermark and/or be distributed at a certain reduced size, so be it. But after that, anyone should be able to copy the content OFF of our platform at will. Or make an export, etc. 

🐴 One thing we should definitely NAG the user to do when they want to publish to the Global Pool: add CLASSIFICATION TAGS. Maybe in multiple paradigms. And of course there should be a wizard to help. 

💳 Hold on. If a Document ID (the data part) represents a SET of NODES, then might it be possible to combine multiple SETS? Going to the College Professor user story; maybe the starting Doc has 12 nodes, they are represented by an ID, and the student adds 20 more... The 20 new nodes could have their own ID? But then there would need to be some hash or something to... Maybe a default way of combining sets, let's say they just sit in the same space, one set after the other. Maybe each set of data nodes includes as a member a "relationships" node which specifies how the nodes (in that set) are related to EACH OTHER. Or, when a set is not the first set listed, said "relationships" node specifies a relationship to any set(s) listed before it. And the first set listed has a "relationships" node specifying all of it's nodes' relationships and positions relative to each other. A set of nodes cannot include relationships to any nodes that may be added later, because the first would have no knowledge of the second. Or is that true? Nodes may be added into an existing structure (ie columns or rows) in a way that is already specified. Or a "relationships" node could specify future relationships by a rule. Uh, I guess any node can have a "relationships" OBJECT, as well as any Doc can have a "relationships" NODE. And same goes for "connections".

That's kind of essential, isn't it? Any collection of two or more nodes that are used together in a Document, must relate to each other in a specific way within that Doc. (This is distinct from their spatial arrangement relative to the Doc, which is saved as the second part of a Doc ID.) 

So in Doc tttttttttt.uuuuuuuuuu.vvvvvvvv.wwwwwwwwww; tttttttt represents a database entry which specifies any number of data nodes by reference, with their scopes, and also "control nodes" such as a "relationship and connection controller" node. When initially decoding the set of nodes, the control nodes must be interpreted. Uuuuuuuu represents the spatial layout other than the relationships, as last saved. Vvvvvvvvv represents styles, appearances, etc as last saved in the Doc. And wwwwwww represents the config of the app as it was last saved including open menus, settings, plugins, wizards, etc. [Bollocks! No! "relationships" and "connections" must be DATA, so should be one node in the collection of data nodes. Or more likely any node has an object for each, which specifies said node's connections and relationships, if any.]
    
🗑️ Before it's stored on our servers and databases, can your browser remember it all? In some encoded form, like deep links plus scopes plus IDs... So we don't get a bunch of shit. And so a whole doc can be represented by a hundred lines of data.

🙃 Oh shit: EDITING... I should be able to edit any Doc without having to first "clone" it. Just so I can see how the platform works and see that I can do stuff easily without finding the menu to clone. Then, only when I leave the page, the app should ask if I would like to save the work as a new Doc. This is especially important for an embedded Doc on a third party website, because there will be no menus visible. Or should we limit the types of edits that can be done on an embedded Doc? Well, without the whole menu space, it is tricky to edit...Is it not true that there are always blank rows and columns just outside the workspace, and scroll bars to get there? Normally that should be the case. Speaking of course of the cases when the third-party site owner has not paid for a locked Doc.

👝 EMBEDDED DOCS: When I come upon a Doc embedded in a website: It should only show a workspace; no menu space and no tabs. I should be able to ADD rows and columns, but not remove cells that are already there. I should not be able to edit data in the cells or change styles or views (other than scrolling the workspace to see my newly added stuff). I should be able to follow source and ref links, drill down (but not scope up), and of course go to the Doc on the platform. When I go to the platform, any cells I have added should be shown just as they were on the embedded Doc, and I can save my new doc under a new ID if I choose. What about ads? Maybe they are outside of the displayed workspace, and I can see them if I scroll. Or maybe when I drill down..., Or maybe only if I click out to the platform. 

💲💀Hold on, if people can pay for special priveleges, then they will need an ACCOUNT. Same is true of INSTITUTIONS. And then...

🍂 PARSING: special behavior of row/column header cells: When I drag a MIXED blob of data (ie a favicon, a web URL, a selection) into a row or column HEADER, I am trying to signal that this data should be split up and placed into the appropriate cells in that row or column. So this action should trigger the smart parsing processes. Pinwheels should be shown in the targeted  cells while the process is working, and for any cells that fail (which are also not already filled) an "unable to parse for this cell" message should be shown, in said cell. (That error message should dismiss itself as soon as another click occurs in it's row/column). What of when there are empty cells that I am NOT expecting to fill with the dropped data? What of when there are already-filled cells, but I want their content replaced with the new dropped data?

🍰 Context sensitive drop targeting: when dragging stuff in off the street (mouse button is down, long-hovered over browser tab) then I should see some visual cues as to where I might want to drop my payload... Maybe bright/dim cells, maybe flag-like signposts.

🍁 And when I drop a mixed/large blob in a cell that is NOT a header? Then it should immediately MAXIMIZE, so that I can scope up. And a message should make it clear I need to scope up, and the "scope up" button should glow and pulsate.

🐚 DEFAULT SCOPE OF CELL CONTAINING ANOTHER DOC: If I put a whole Doc into a cell, the default scope should be to show just the Doc's NAME and a graphic representation of it.

⚖️ But it would really be nice if there was a kind of RESPONSIVE process: when the containing cell is large (relative to it's neighbors), and the contained Doc has a small number of cells, then the scope of the containing cell should show the mini cells with their most important data ("most important data" could mean (in order of priority) title, first heading, image, icon, SVG)  

🖼️ Also, when a whole Doc is in a cell, there should be a special border or something, maybe. At least until I don't like it, and get rid of it.

▶️ When I add an Interaction to a Doc, I get a dialog / form with options for the Interaction. Essentially, the Interaction's cell gets maximized, and I scope it. Example: I add a "PLAY" button in a cell by itself... The dialog let's me choose which cell(s) I want this button to play. If I select multiple cells, the dialog gives  options for "shuffle play", "ordered play (select the order)", "play all at once", "play next (select the order)". As each cell (to be played) is added to the Interaction, it now appears in a list (in the MAXIMIZED cell of the Interaction). If I drill down on any of the items in that list, I can change HOW the playing happens: maybe some play backwards, maybe the speed, maybe between two timestops. Maybe some of the cells I added to the Interaction are not even MEDIA; I could connect the scroll bar of an overflowed text cell to the PLAY control. The dialog should also give me options to "add all latterly added similar cells in this/these row(s)", "add all latterly added similar cells in this/these column(s)", "add all latterly added similar media cells throughout the Document". And of course, this Interaction is a widget, so it may have multiple states and actions: I probably want the button to PAUSE if clicked while media is playing (and the graphic should change accordingly). And I probably want to be able to add other buttons to the widget: a RESET button or range slider. Those of course are added by drilling down at the graphic of the button itself (in the maximized view), rather than on the list items of the connected cells. And of course, if I had any cell or cells selected when I added this whole Interaction Widget, then those would already be populated in the list (connected) and I wouldn't even need to drill down (default config is "sequential play; all; half second between; ordered by how they were selected"). 🔌 Now that's a plugin!

⚖️ RESPONSIVENESS: when I scale any part of the UI (such as a cell or a workspace or menu space), or scale many together by ZOOMING, then elements inside those elements should behave RESPONSIVE to their respective containers. And of course this all respects the actual media query size as well.

⚖️ When things are at their SMALLEST, they should be displayed as ICONS. A Doc in a cell should have several levels of responsive display. It's smallest display should be an icon representing the STRUCTURE (time ribbon, calendar, BLOBSPACE, Venn, tree, table, etc)

🤔 How about this: The first part is just the unique ID of a single Doc. 

The second part represents the VERSION (history) of the Doc's NODES; their content (connections), positions, shapes. This can be a  single string or an object of multiple strings, the first of which represents ALL the nodes at any point in history, later appearing strings represent subsets of nodes. A later-apearing subset of nodes has its own position, shape, and size nodes, and the POSITION node may well override earlier-apearing positions.
 
The third part represents the VERSION (history) of the STYLES, and is optional. Again, later-apearing styles override earlier ones (just as CSS already does).

The fourth part represents the VERSION (history) of the CONFIG, and is optional. Whatever actions were taken, whatever Wizards helped, whatever menus were opened, to get the Doc to how it is now, are in the history, but are not needed to view it how it was left.

And the EDITING? That is just a KEY. Whenever a new Doc is created (or cloned of course) a new EDITOR'S key is generated and displayed to the creator with the message "ANYONE who has this key has ALL the editing capabilities". And when I open a Doc I can enter the key in a spot in or near the Doc header. 

The GLOB: When I visit a URL with only the Doc ID, it opens the LATEST VERSION, and displays the glob (of the latest version) in the address. When I visit a URL with a glob, then it opens whatever version of the Doc said glob identifies. When I visit a URL which ends in /[KEY] (and it is the correct key for the Doc ID) then it sends the key, opens in EDITING mode, and the KEY is not displayed in the glob.

So www.platform.app.com/[DO
C].[(VERSION,SUBSET)].[STYLES].[CONFIG]/[KEY]

🎸 Later, when we add the feature for Doc Author + Collaborators; we only need to generate additional keys, with aliases, and they simply are limited to creating a SUBSET of nodes. Then the Author can MERGE, which creates a new set including all nodes.

P.s. The STYLES node for a DOC is a very limited set of rules. It can only style the Doc's background, any or all nodes' borders. And if it does style some node's border, then it overrides that node's own style for its border.

P.p.s. a DOC, as it is stored on our DB can have any number of other kinds of nodes (objects) that modify its contents. Having these four parts to the ID just gives an interface to those parts and their respective histories. Later, we may add or include other parts in the globbing API, and add as many types of invisible nodes as we like.

🌝 Now, we just have to figure out what exactly is meant by "position", "shape", and "size"...

🎚️ And what all nodes (objects) are needed to fully define a Doc. (Are they all optional?)

📍 FIELDGUIDE/DIRECTORY: instances: Directory of London Biodynamic Farm's (with columns such as "public classes", "sales of preparations", each type of produce they sell, "where to buy"). 

📱 Guide to Smartphone Sled Tech: a comprehensive listing of all the sleds out there. Categories like "currently available/experimental", and sortable by industry.

👜 Guide to NY made handbags: yeah.

👗 Street Level Guide to Fashion of London: a sortable/filterable collection of user-submitted pictures of fashions seen around town. (Nice to have: a face blur tool).

🏛️ CONVERGENCE: We may have to do it ourselves sometimes. This doesn't mean a user won't be able to always access a Doc they made, it just means we may make, and promote in search, a more converged or comprehensive related Doc. And we may add more sophisticated filters, such as an Interaction that helps user choose their region or domain of interest or select a narrow specific case from a set of generalities. BUT we must guard against letting algorithms do the thinking in place of people. Ideally this feature would entail a sophisticated wizard guiding the human author to create the ideal document. Otherwise we will end up with a robot created FORK of a human authored project. Because of how versioning and history works, every change is a sort of fork, so this hypothetical amazing wizard should also help humans re-merge said fork by showing the algorithm driven changes and their reasons, and asking the human to approve them, reject them, or guide different changes. Of course a wizard like that must find a human who CARES. Which could easily be detected based on use patterns.

🔨 Useprinting: we should be able to classify users on the fly by how they use a Doc. We can note a clear line between a "viewer" and a "builder", and should be able to break down the "builder" further into a.) people who seem to be editing/adding the original content, b.) People who seem to be taking the Doc in a new direction, and c.) People who seem to be just tweaking things a bit. A "viewer" includes a person adding comments, tags, flags, and using the built in interactions (which may include adding content in cases such as surveys, but doesn't indicate someone who is concerned with how the Doc is put together).

⭐⭐⭐ SIDE BY SIDE VIEW: Whilst clipping, or scoping, or viewing sources, we can display it in an iframe split off to the side... Surely we can do whatever we want in that iframe, so as not to need any browser extension.

🏙️ ANNOTATION is a CENTRAL and ESSENTIAL feature. Any user needs to be able to easily add their two bits to any Doc or cell. Any original Doc in the Global Pool should be open for comments and ratings, either as the creator intended or more generically as comments and ratings on the quality/efficacy of the content or knowledge therein expressed. Any user should also be able to get feedback/comment/review/annotation/collaboration/Input from a specific KNOWN PEER. Thus, we shall have a comprehensive yet finite set of Interactions available for a Doc creator to add, as well as some that are always part of any Doc in the Global Pool. Likewise with filter/sort interactions.

DDD/MICRO-FRONTENDS DOMAINS: TEAM ADD STUFF, TEAM APPEARANCE, TEAM STRUCTURE/CONFIG? TEAM PUBLISH/SHARE, TEAM ANNOTATE/METADATA/CITE,TEAM DISCOVERY, TEAM EXPORT, TEAM SECURE, TEAM MONETIZE.

[The "(tab)"s marked below indicate that these teams are responsible for a top-level permanent UI tab. There are 5.]

• (tab) TEAM ADD STUFF: All the things that go INSIDE a noid. SUBDOMAINS: SCRAPE/PARSE, DRILL/SCOPE, INTERACTIONS, TEMPLATES/WIZARDS?, CHARTS/GRAPHS,

• (tab) TEAM APPEARANCE: Intra- and inter-noid styling, styling of objects (text, emos). SUBDOMAINS: one for each object type.

• TEAM STRUCTURE/config: This is tricky; the structure is a separate object from the Data and the Style... The Config UI can go in a subsection of the APPEARANCE tab, but config is a separate object and part of the ID systems.

• (tab) TEAM PUBLISH/SHARE: DOC ID GENERATION, KIP PRE-PUBLISH WIZARDS, SHARING IDS/ALIASES and KIP FIELD DIGRAMS 

• TEAM METADATA: Everything we add to the DB, and the things we make available back to the UI like CITATIONS and PERMALINKS.

• (tab)TEAM DISCOVERY: GLOBAL POOL, Search and recommendation engine, compare current doc to others, community content filters, KIP FIELD DIGRAMS?, KNOWLEDGE IMPACT

• (tab) TEAM EXPORT: EMBEDS, EMAILS, PPTs, PDFs

• TEAM SECURE: Responsible for ensuring certain things DO NOT make it into our platform... ANTI-BOT,ANTI-LOOPER, ANTI-DOXX, ANTI-AUTHORSHIP (Or is that for Team Discover?), ANTI-FILTH, FLAGGING,

• And what about other bits of the page, like "about us", "terms of use" links? Rude to tack it onto the responsibility of another team...

DDD Note: Workspace Tabs (not the menu Mega Tabs) can be added by any team, and/or the Workspace can be split. Because often a UX involves a new Workspace Tab appearing to the right with information or options for the user to choose often much like a Doc anyway. Therefore must there be a fundamental API handler for any team to add a tab.

💺 NEWDOC: When I visit the site, I see a "blank" doc. But it isn't blank, the cells are filled with tutorial GIFs, examples, instructions, diagrams ("anatomy of a cell", "intercellular styling"), etc. Including links to more specific examples and templates, all nicely organized into rows and columns of related ideas, of course. And each ROW can link to a whole doc on that idea, of course.

🤖 Tech Example: Figma wireframing!

👓 Internoidal Style menu ALWAYS PRESENT: snap to grids, overlap/no overlap, invert selection, switch rows/columns, align columns, align rows, align both

😝 p.s. "I made you click me!" Is a shitty and meaningless measure of a UI feature's worth! 
News feed and YouTube seem to rely on it. But if clicking a button or link indicates value, then there MUST be a measure of indication for the user deciding they don't like it after all.


{}  Speaking of integration... How should a WEBSITE INTEGRATION BUTTON work? Well, it should basically be an advanced "COPY" button. If something is selected on the page before clicking, then that should be copied to clipboard. If nothing is selected before clicking, then the cursor should turn into a MARQUEE select tool, to "snip" a portion of the page. After the copy action is completed, the user will need to... do whatever they want with the object... All that happened is a clipping was made, and a bit of metadata attached to it. Of pasted into a plaintext file, it would appear as CSV and image. But paste it into an oid or noid, and a whole cell is made. All this does is save a few moves and clicks. If a website does not have this integration button, then a user simply starts on the Document, clicks the "snip" button, switches browser tabs, drags a marquee, hits enter, then drags the clipping back to the tan with the Document, and drops it into a node.... Or one of the other intuitive workflows, such as copy/paste, select/drag/hover/drop, scope-to-website, etc.

SuperDocs Features and Ideas

🤖 Thoroughly vetted, vetted, unvetted... Instead of different content zones, curated categories, parental controls... Just badges. That only we can add.

💭 It's a RESEARCH ENGINE. The Information-Knowledge Continuum currently consists of search, research, and communicate. Our system addresses the need for specific tools in the research space. And let's be clear, these are aimed squarely at the everyday consumer. Just as Google etc made SEARCH into something ANYONE could do to an elevated degree, we make RESEARCH something anyone can do to a profound degree. No longer are professional specialized skills necessary to turn vast and diverse sets of information into clear and conclusive research. Brilliant search was the first revolution that gave every man woman and child a stake in the information age. But now we have TMI. The average regular folk is buried and overwhelmed by information, only specialized professionals and firms can really cope with turning the results of search into research. We have rectified that. We leave search to those who have begun it, and also the same with communication of the results of ones research. But the research systems: we  provide.  

🐎 Giving each individual person the tools to organize the world's information, from their own perspective, just as they see fit.

• Cyclops: "Follow this Story" integration button embedded in news-related websites. This takes the story to a sheet (opens sheets, suggests choices, gives options to navigate to existing sheets or start new) Helps user find original source publication, alternate write-ups, and most importantly: find, add, organize follow-up stories on same headline thread. Usually, a site that embeds this button will have relevant content (particularly the citations) that link to related info, such as the original source. 

• Wizards like Cyclops probably should live in a smallish badge in the Doc header. And if they have something to say, a little speech bubble icon is overlaid on the badge. Click the badge to see the Wizard's various dialogs. More than one dialog may be in the Wizard's book. And as things change in the sheet, new dialogs will be offered. 

If a user wants to "follow this story" from within a doc or a third-party site, the button will launch a spider which will send back suggested articles, especially looking for new original content. It may also ask the user to train it by clicking on several examples it returns.

• For that matter, many of the named  prefab Wizard templates could have their own embeddable buttons that third-party websites could easily add to their pages. This makes integration a snap. Of course, if a site does not have a button, user can and will always be able to select, crop, or scrape data, then drag into SuperDocs.

• On the other hand, with a browser extension, a user can start with some web content, and add bits and features from SuperDocs RIGHT ON THE PAGE!

• On the third hand: If a webpage has a SuperDoc embedded, a visitor can always add rows and columns and cells to that SuperDoc ON THAT PAGE without a browser extension! Because, after all, it is OUR SuperDoc they embedded. We could give site operators the privilege of locking their cells, or even of disallowing visitors edit rights altogether... For a price.

* Remember: Search is secondary... All features and functions can be developed before and independently of the search related features... This doesn't mean search isn't important. (Search features are: Search Engine Scripting Control, Smart Search, Search Terms in Header, Ongoing Robo Search... Etc.)

• Consumer first, pro second. As far as development cycle goes.

• when Scripting smart search, it would be nice if the user could "blacklist" a result they don't like. So it doesn't come back. Fuck you very much.

• Diffbot®! Holey shit! Web Page Content Extraction. This could do a lot of the heavy lifting in the background. Also see: Readability®, Boilerplate®, AlchemyAPI®, Embedly®, and Goose®.

• ATLAS.ti is software for "qualitative research"... They use words like 'classifying, sorting, and arranging'.

• We will not create, receive or store ANY information or profiles on our users. All we will do is analyze the aggregate usage of the information created on our system. So the only 'secrets' we have to keep are data relating to usage of our product, such as how many times a given image was reused or shared or tagged etc. We can ring-fence this 'secret' data by periodically removing it from the servers. That way even a Spectre type exploit, or any other attack on the cloud, cannot find but a brief period of accumulated statistical data.

• What about "share", "connect",  "invite", and related 'social' features? A). You SHARE links and encoded hashes only...and you have to use your own comms: yes, you have to copy/paste into email! We don't want ANYTHING to do with your personal info! 

• Rather than a User Account, a user should always be able to create an Individual Hash... If you register the IH (basically, log in) you can see  all that individual's activities. This is good for people who use multiple docs, leave hearts, tags, etc. Similar to Craigslist "post and edit" email. The main problem here is that this could leave a door open for robo editing and DDOS attacks. That will have to be addressed with deep learning, I suppose, or there may be systems already available to mitigate, distinguish human activities from robot.

• Code Of Ethical Technology:
  -profile use, not users
  -track patterns, not people
  -curate but don't exclude
  -be neutral, but not anarchic
  -no user accounts, if     possible. Let users keep their own accounts!
  -no cookies or trackers of any kind... Offer APIs
  -incentivise for what you want to see, charge a premium for what is a privilege, don't try to strong-arm behavior.
  -advertise in the context of the content, not the specific user!

• How can we distinguish then between unique users? How can we keep out the bots? Many ways, perhaps... Cryptographic Hashes, of course...Usage fingerprinting,

• When you want to save your work, you are just downloading an 'output' product of the information ALONG WITH a cryptographic hash representing the unique document you have created. Maybe even a cryptographic hash of your usage history, ie what docs you have edited, and those edits. When you want to open the document again, you are sending the hash, we use it to identify the exact same doc. If other people have worked on it, we show you options and choices to view their work alongside your own. We use some AI and pattern matching etc to recommend documents that may be the same subject matter but further developed or with small unique additions you may be interested in. If you open additional docs (in new tabs) you can always 'merge' docs, 'merge selected' parts of docs, or simply copy-drag parts from one to another. Just remember, anyone with that hash can edit that doc... Which isn't a big deal, every doc retains it's own history. So you don't really HAVE to save a hash, you could just use the history to go back to where you were.. 

• The only way we identify a "unique" user is by a hash. And really it's "unique user•document" since a real person will have many hashes from editing many Docs.

• CLIENT: Ah ha: anyone can build a SuperDoc user account "client"... A tiny simple program that stores ID Hashes, and even history. That way a unique user can always access their own work. We can build a simple basic robust open source client program... And leave it to others to build more elaborate clients and integrate with other software. These clients may not even need to access APIs, because all they do is store a lot of doc ID hashes and etc (and  store Output Product type docs; PDF, HTML, vector, etc (although really, these files are STORED on the local machine, just ORGANIZED in folders here in the client) The client just has to retrieve a doc any time, not load or edit in any way (that is ALWAYS done online). Of course, no one has to save anything if they don't want to. Anyone at any time can always access, view, edit, and publish from (output), any Doc or any node whatsoever. Users can always WRITE IT DOWN (like, on paper) the hash thingy, that is. The only thing that might be handy that would expose someone to some potential direct association with specific content, would be a sort of My History function in a client. This would make it possible to view "my thumbs up activity" for instance. This could be password protected on the client side, and if you want more security, just download a few random usage histories from random other users, so yours is meaningless... 

• Diagrams and even animations of the history of the state changes, with branching and merging and unique users with color coding... This can be made available to the user, but is also how our algorithms find you the best version of your knowledge.

• from any STATE of any doc anyone can generate a public hash as well... This is how docs are usually shared. The public hash represents a specific state, so the sharer knows what they are sharing will not have changed. In fact, the public hash is always available in a box at the top of the "share" drop-down menu. 

• So why do you need a private hash? 

• Maybe we don't. The main reason to have it is so a user can sort of "own" their own work. Maybe another way would be to let a user select something like "don't publish yet" or "not ready for prime time" for several days or edits or iterations. That way they could sort of save their work, or rather, at least finish it before everyone else gets to see it. In this case the hash IS private, or only revealed to the originator of the doc. But then, after a while, based on our algorithms, we just release the doc into the public pool. Sharing (via sharing the public hash) should be available while a doc is in this "incomplete" state, to foster collaboration and even limited-time insider proprietary treatment.

• This is all closely related to VERSIONING, which is a big issue and a whole set of features in it's own right. For one, we should be able to provide a simple and direct GitHub integration... But more to the point, any doc should be able to self-generate an Interactive Version Control Diagram, which shows branches, users (how?), Related docs, Knowledge Integration Phase, etc... All from the perspective of the current doc... You can navigate among docs from within the IVCD or the other way around. Major states are shown in the IVCD, and you can expand/drill-down to see minor changes... Each and every state is represented by a hash. Even the tiniest tweak to the view or styling changes the hash, of course. Thus, no commits are required, because all changes happen in our cloud app.

• This hash based versioning will work best if there are two (or more) parts to the hash: one part represents the STRUCTURE including styling, format, structures, positions, sizes, templates, etc. Another part of the hash represents the data, including linking,interlinking, intralinking, markup, formatting, including the metadata: tags, flags, annotations, and all system metadata. Perhaps a third part represents the "location" of the SuperDoc within the whole ecosystem.

•Every time you open an existing doc, we show recommendations I.e. search results. And there is always the "similar docs" menu item, or 

Holey Shit• CONVERGENCE... just hit the search "go" button while some info is highlighted.. which searches for similar data in similar rows/columns on other docs. New doc pops up (in new tab of course) new info found is highlighted, ready to drag into your first doc. !!! ...ie Several cells are highlighted, ones that add NEW and RELEVANT stuff to the doc you are working on. When you drag them to your doc, the cells and/or rows/columns pop into the places they need to be, based on similarity to target schema. of search would be useless if it returned nearly identical info to what was used as the search parameters... What is needed is the relevant NEW info. Note: we should warn people away from creating very similar docs. And urge them to make their own unique thing. If two docs are similar, and the user essentially just merges them, some information is lost. There is less of a distinction. Two smaller more essential docs may be better than one big comprehensive doc. This will require a subtle algorithm... And maybe humans can help... When our algorithms see multiple similar Docs, a dialog could appear, saying "We see there are several very similar Documents. It is usually better to have a MetaDoc which organizes the subtopics, and make each subtopic more specific and distinct. We are happy to help you do this... Just click "yes" now to start the MetaMerge Wizard" and then show a 'loose' meta doc of column and row headings, ask user to select some to keep, and then same with cells... And then a 'tight' meta doc with the subcategories' Docs from earlier in individual cells, down a level. Humans could be trained to help with this, we could operate an outsourced work center, or try to do it through AMT. 

If we can make all that work, we will already be very close to defining a "knowledge integration phase" parameter. CONVERGENCE



• Ultralinks®: browser extension adds rich context links to text on any page.

• cottonTracks® "The Journal Of Your Online Discoveries"... A tiny bit of a competitor.

• ScissorsFly®... Online clipping and scrapbooking. Maybe defunct... 

CiteEvidence® (founder Al Johnson) crowdsourced fact checking...

• Tagline: "Now YOU have the tools to organize the world's information: as YOU see fit, for YOUR own benefit, from where YOU stand"

• Drill Down: drill down even further, and you get to the markup level... Remember, any data node can be marked up, using any markup language or even a combination of multiple markup languages.,

• Oh shit! Very important feature: FILTERS ... When you build any comparison table, you need to be able to filter how it is displayed. In most websites, the filters are off in their own div on the left, which usually floats along. Maybe ours could be in their own cells (many filter buttons can fit in a cell, depending on the size.) This way, filters are just more interactive objects users can put in cells. Perhaps filtering cells should have some formatting rules attached, like making them stay along the side or top and float...

• Ethical business practices foundation presentation: 1) We will NOT have any user accounts, nor track any individual user or address. 2) We will take every active step to ensure users are anonymous, from us and from each other. 3) Our forum content will be highly curated, to ensure quality, user anonymity, user privacy (anti-doxing, no IP addresses, copyright, etc) 4) Advertising will be in current local context, based on what the user is currently using, on our sites only, not based on any browser history or other tabs. No cookies either. 


• Locally Contextualized Ads: We will only host Locally Contextualized Ads such as direct affiliate marketing partners. Also, we will not allow our product to be embedded into other websites that TRACK their visitors [actually, no. That would be acting like a dictatorial bully. Instead, in the interest of keeping the APIs open, we can shame those who do track, and incentivise those who don't.] (All that after WE (the company) reach a pre-determined size threshold). Also, when a user initiates a SEARCH through us, we will give a strong warning if they are using a search engine that tracks them, and encourage them instead to use 🦆 🦆 Go.
    
• Actually, I can think of plenty of situations where it would be useful for cells to be resized independently of the row and column. If there are columns basically unconnected to each other topically, but you want a neighboring column of cells to the left to identify the right hand cells, ie a new column of heading cells. In Excel this is done with empty cells for the padding. But it might be nice to just have some padding, which could be filled with art or colors.

🌶️ Holey shit Batman, check out parabola.io... 

📈 Data Vis: Flourish, The Data Visualization Catalog, Visualoop, infogram, reflect.io

🦄 The fruits of an effective search = information+facts+data+sources. The fruits of an effective research = Organisation + Verification + Communication.

🎙️ In this information age, the meaning or definition of the word 'research' is in need of updating. In the not distant past, gathering raw information, finding information, searching for data, searching THROUGH information was in itself a big job and took time and skill. And now all our current dictionary definitions of 'research' include, and even rely heavily on, the concepts of searching, gathering, and finding. However, in the information age, information is certainly easy enough to find, gather, accumulate. So now we need to make a DISTINCTION between search and research. It isn't complicated. Search is identifying, finding, gathering, resulting in an accumulation of INFORMATION or DATA. Research is organizing, sorting, verifying, rejecting, filtering, preparing, reformatting, restating, and making ready for communicating, resulting in an accumulation of KNOWLEDGE.

It is essential for us to start in the market sector of the 'basic common everyday consumer'. This is where the hordes are, this is where the numbers are, this is where the money is... But also, this is where the revolution is. It's the everyday ignorant masses that are desperately eager for tools that give them power. That is the secret to the current crop of IT Giants.. give the masses transformative tools, big levers, change them from the ignorant masses into sleek fast smart professionals. They are waiting for the levers that can help them turn the world's information into their knowledge. 

🖋️ If a picture is worth a thousand words, how much is an infographic worth? How about an interactive, animated, connected, real-time, self scaling, horizontally-and-vertically integrated, shared, secure, intuitive, flexible, dynamic infographic?

That's the future of GUI. 


©️ Should Original Content upload options include copyright/left services, watermark services, pruning/reduction services, and a search wizard to help identify the actual copyright holder (if not you), message them, and post accordingly...

📖 To be clear, the saved "EXPORT" documents are not static, though most should have a default static view, a .PDF... They are dynamic and interactive, though no longer connected/online/live. Conceptually similar to 3d PDF or .PPT. Perhaps a good file extension would be .iig for interactive infographic. (.iig seems to be available).

Also, a .iig static view (a .pdf) is the very same as a "print" view.

Also, EXPORTS in general can be copyright of the user (if they can accept responsibility), whereas the normal online view is copyright of us.

🤺 Launch String Simple Markup (or Wizard Conjuring): it would be nice, when starting a new doc, if you could put some intelligence right in the search terms: Harvard::Yale::Princeton starts a standard COMPARATOR doc  with rows for each of the universities and several standard columns like price, link, pic. Other types: wars=>Roman creates a timeline, Apple Inc # Microsoft # Google creates a graphspace, {cats))dogs))mammals} creates a vennspace with cats and dogs inside of mammals, {cats)(dogs} creates cats and dogs overlapping, etc. etc. And then we can always specify which named template/ wizard we want included, just append before or after with a ... , And if you don't know the markup, just use a name or alias ...Venn diagram... Cats, dogs, gerbils in mammals, fish, lizards, in pets. "US map: each sate: total highway miles" should, well, be obvious. 

〰️ And, of course, markup languages and markdown languages can be used throughout. 

🔠 In COMPARATOR tables and cross reference tables: 1.) It should be possible to transition from one type to the other, maybe with a nice animation. 2.) There should be a menu option (offered by the Wizard) that can "highlight correlation" and "highlight difference"... This should produce not a single shade of highlight, but a sort of color map with several shades showing significance. How many shades should automatically grow with complexity and/or size of data set (of course the colors and how many shades are defined in the stylesheet).

🎲 Don't forget, EACH CELL may have search terms in it's metadata. Though usually you would want them in the doc header. (for instance, I may want to use each cell to literally compare the results or effectiveness of search terms)

⛳ Column Group Sort: in a standard COMPARATOR, I may want to save groups of columns as a sort parameter. These would be shown first. This is very useful to communicate multiple target purposes for a comparison. There should be options to show the column groups as a SORT (each column unique, sort group first), or as ALTERNATES (each alternative shown as a set of columns with columns repeated as necessary). Example: feature comparison of LMSs like Moodle and Blackboard:  We may have different PURPOSES in mind such as one for a university students and one for company staff training and compliance. The two 'purposes' can each have their own set of feature priorities which we  select as a saved set of columns. For university purpose I want certain features first (grading, pop-quizzing), and for staff training we want other features first (certificate tracking,  drug test ageing)... And we can display simultaneously with duplicate columns to compare for all purposes, or sort by column set to show which product WINS for a given purpose. Sounds complicated, but it's simple.

Another way to conceptualize this: add metadata 'tags' to columns (in the top cell or other 'header') if a tag says "relevant to: PURPOSE" than that column should appear first (to the left) when I 'sort by PURPOSE'. If a column has multiple 'purpose' tags, than the column is duplicated for each. 

Search: classification tags: limit my search to a specified FIELD of knowledge... For example, compsci, ag, botany, sci, engineering, mech-engineering.... These can and should come from some classification system, by name or number. But probably only the top-level classification classes should be used. Or maybe not...

🏛️ When switching Model Type (like from Grid to VennSpace) there should be a dialogue prompting you to select options. The options specify relationships (most importantly), and other settings like formats, templates, and styles. And of course, the menu for changing these later is always available.

🦄 Check out/investigate SCRIMBA. How did they build this? What technology is being used? (One founder is named Per Borgen)

🔘 Drop Target and drop dialogs: when I drag information in off the street, I should have several obvious places to drop it. One, there should be a 'drop
target' somewhere (probably above A1), this can be used if I'm not certain/confident where else to drop. Two, the preferable drop point is into a row header cell. If I know the info should go in an existing row, I drop into that Row's header cell. If I want to create a new row with the info, I hover between cells to open a new row, and drop. If I think the info goes in a new or existing non-header cell, then again I can drop into an individual cell. Or hover to open a gap (creating a new column or new row of course). However I drop info in, there will be a bit of a dialogue to confirm it is parsed how I want it and put into the right places. If I use the drop target, that means I have the least confidence/want the most help. So in that case a modal window opens with the incoming info parsed/arranged by machine best guess. In this window I can easily drag/drop to rearrange and select/deselect options like 'create new row', thus correcting machine's best guess. I can also discard unwanted data from the info. As I manipulate the info in this modal window, the table is also visible behind, with connecting lines drawn over to show where the new info will be going in the table, and cells highlighted (for existing cells). The dialogue is a bit lighter when I drop into column or row headers, because my confidence is higher. The newly created/modified cells are highlighted ( maybe until I commit the changes (cell-at-a-time or column/row-at-a-time)). Now the really important thing here is that the machine's guessing pattern maps are getting better and better the more info I bring in and the more I correct it's matching guesses. Also, as far as UI goes, if I drop nowhere in particular, the same comprehensive dialogue should open. If I am trying to drop in a specific cell (or gap) there should be a clear hover-time action, visual confirmation of target aquisition, and maybe cell-level drop targets. 

📜 Codebase tests: project is to develop SOFTWARE, not just an app. I would like tests to show: How many micrservices/lambdas exist/are deployed. How many API calls, of what types, last time called, age/version of source? Lambdas/microservice auto deployment tests: can a single "BUILD" command select the right microservices/lambdas, containerize them (and otherwise prep them for deployment) automatically find hosting services, find alternative hosting services (by cost, etc), activate the hosting account, and make them live?

🎚️ Contrast sliders in the Appearance menu: I shouldn't have to select every color for every bit of text, and every other item. I should be able to adjust the appearance with three or four sliders, and still adjust colors, and still pick a color scheme. Contrast-Items/Background should brighten/dim the background color and brighten/dim all the objects. Contrast-Widget or Contrast-Icon should adjust the contrast between the colors/saturation of the several colors in the icon/widget. Contrast-Text should tweak the colors in a body of text that has multiple colors, otherwise contrast the background. Contrast-Font-Styling should change the font variations to make bold, italic, superscript, underline,etc more distinct across a body of text. These options should apply to the whole document if no cell selected or if all cells selected (this is preferred) or to any selected cells (not preferred as it could make the overall document look crappy: warn against)

🏕️ And, in the style menu, I don't want to hunt around for all similar elements all over my doc, so there should be be a button "select similar elements for styling"... This may work with a single element selected, or may be grayed-out until enough (3 or 4) elements are selected for the algorithm to define "similar". Better than "format painting" bullshit.

💠 Likewise, color/style schemes can be applied to the whole document or any selected cells. They could be applied to: backgrounds/borders/UI, widgets/controls/icons, text, or to any set of these. (style schemes means variants of icons such as rough/flat/dark/bubbly/whatever, or groups of strokes applied to lines/gradients applied to fills, groups of fonts/variants applied to text) Again, this should all be done with sliders: styles: serious---playful, colors: childish---feminine---corporate---masculine---childish, fonts: UI---bookish---outrageous. And of course all the contrast sliders still are available underneath each of these categories, so after adjusting colors to girlish I can still make the whole thing darker or more contrasty, or make the borders/UI elements more or less styled. And of course all of this is just a WYSIWYG editor for the stylesheet, which I can edit manually if I want to. Or I can create stylesheets to reuse and share. Although applying someone else's stylesheet may be a bit pointless, as it is so easy to apply my own styling to any document. ... Instead...

☯️ My Styles, and My Default Style: so when I open a document, I see it styled in one of my saved styles, or my default saved style (the one at the top of the list), or not, if I am not signed in or don't have this setting turned on. (Just kidding about being signed in... There must be another way) Ok, just a single slider control with a dozen or so stops (style of the day?)

🕸️ Nodes nodes nodes: If I want the cells to represent nodes in a map/network diagram/flowchart... Then I would want to be able to select their SHAPE from a small menu, add different kinds of interfaces to their borders, connect them with connection lines, and add descriptions to the connection lines, and move the nodes around.

‼️ G2 Crowd Grid... Check it out. G2 is a software comparison site...

[NOTE]
INTERFACE

🚥 #MERGE is just a shortcut for #RESIZE + DELETE. (Or RESIZE + #POPOUT if target has content) #MERGE/DISPLACE/VENN

🍰 #MERGE shall only work when NO MORE THAN ONE knode in the selection has #CONTENT. (The content becomes the new content in the new knode, the ID stays the same) Then the styling etc is taken from the one that has content, if any. If none have content, the styles are chosen according to the following priority:  1st any styles that occur most frequently within the set, 2nd any clear row or column trend (note that the code must interrogate the neighboring knodes; they are "formatless"), and 3rd (if none of those is unambiguous), apply the #KNOID DEFAULT CELL's stylesheet. Remember: #FORMATLESSNESS!



😋 #IRREGULAR SELECTION MERGE: I should expect to create the odd combination of knodes as a separate step in the workflow. Therefore, to create such a shape, it must be made up from #EMPTY knodes, or only ONE can have content. If I want an oddly-shaped knode, I put things into an oddly shaped knode. #IRREGULAR KNODE #BLOBSPACE #VENNSPACE #CONTINUUM MATRIX 

🚚 #MOVE SELECTION: Shall ACT AS IF THE SELECTION IS a #RECTANGULAR SELECTION (using the #GIZMO as bounding box). And there should be created a #NEWCOLUMN (when moved between columns and not between rows), and #NEWROW (when moved between rows and not between columns), and #NEWCOLUMN+NEWROW (when moved into the quad gap). In this behavior, the new column or row created should match the selection being moved: if the selection is a rectangle of multiple knodes, then the same number/width should be created in the new column above and below (and/or  to the left and right in the case of row). In the case of moving a non-rectangular set, the #VOID left behind shall be filled according to the #NEIGHBORING KNODE ALGORITHM, and the selection set itself shall not be filled. 

??? #NEW KNODE BY DOUBLE CLICK: What if there is an odd shaped space I want to fill (ie it could be filled in more than one possible way)?  Or even a rectangular space, but more than one row/column? If I double-click a space to create a new knode, should it only be one column by one row? Or should it be a rectangle that fills the whole space, or a minimum number of rectangles that fill the whole space? What if it's only a partial space in one or more directions? #EDGE CASE #SNAPPING

#SNAPPING: There need be only one kind of snapping, and one toggle button in the #REGULAR MENU BAR. It snaps to knode edges and column edges (leaving a gap if there is a gap) when #SCALING by the widget and when #DRAGGING. 

🌚 #FILL VOID: After a #MOVE of a #RECTANGULAR SELECTION, the void left behind should be filled with new empty knodes. (If you want an empty space use #DELETE) The void should be filled contextually according to the number/size of knodes to the left and above. (Bonus) after the void is filled using the default of left and above, there could be some UI to click for changing the new knode #NEIGHBOR MATCHING. ...DURING the move (while I am still dragging the knodes around, before I have placed them) the void should remain a void, so I can change my mind. [Edge case: What if I just want to move the selection to the neighboring space? Will it think I am trying to change my mind? Answer: #SMART OVERSHOOT: Move it a bit further than I want to go, so the space opens up as I intend, then slide it back partially into the original space.]


🔩 #ZOOM LEVEL CONTEXT: #SCALE/CORNER/ROTATE GIZMO: (frame+handles) only available when zoomed in to a certain point... Otherwise,when zoomed out, cells can only be MOVED. It has to be this way. Of course, you can use the sliders in the main toolbars to change the shape of any Knode(s). #RESPONSIVE #RELATIVITY #ZOOM #PAN

🖱️ #SELECT/#HOVER: These two states are independent. The main point of #HOVER is that it will #SHOW all a knode's UI #BUTTONS, which can then be clicked. The knode does not need to be selected to EDIT! The main point in having a #SELECT STATE is to make a #SELECTION SET of multiple knodes for moving etc and applying functions (e.g. styles) to multiple knodes at once. One can #HOVER, and use the SIZE/CORNER/ROTATE GIZMO without selecting the knode. And one can drag without selecting (using the #DRAG HANDLE or any #NON OBJECT AREA (i.e. the margin)). One can #SELECT knodes, and then move the mouse away, they stay selected but no longer show the gizmo. They need to be clearly distinguished visually. Obviously, I can only hover or drag one knode at a time, so if I want the #GIZMO on  more than one, I will have to #SELECT.

#DRAG: a single knode, not in #SELECTED STATE, can be dragged around by hovering to show the #GIZMO, but also by simply dragging! I should be able to drag by any part (even buttons), except the resize handles or any slider-type controls.

#CONTROL LINE: There must be a way to manipulate knodes purely via keyboard input:  :size/:corners -these would show the widget, and then prompt further specificity (if not already given)... :"size ll l2.5 d1" 

💗 #RESPONSIVE KNODE CONTENTS AND MENUS:

💳 #DIVIDERS: there must be a term for this... Many cards have an area for the picture and an area for the info, usually at the bottom. #OBJECTS


💊 #STANDARD TABS: there should always be three additional tabs open: #DISCOVER, #STYLE, and #HISTORY. DISCOVER🔎 includes basic related docs and knodes, and also #TEMPLATES. STYLE includes knode styles, knoid styles, UI layouts, and other useful things. History includes branching diagram and tips and explanations. But I should also be able to open #META which includes #HELP.. #TABS

The #EDITSPACE shouldn't exactly have tabs... But it would be great if it had one tab, with the #KNODE ID or #KNODE NAME in the tab. And it would be super great if there were little left and right arrows in the tab, next to the label, which would cycle through the ten most recent knodes that had been edited. This would be a totally #STATELESS function: it isn't moving through history, just the knodes. They are loaded into the editspace in whatever state they are currently in. Also, clicking the ID itself should pan and zoom that knode into optimum view over in the workspace to the left. #EDITSPACE TAB #RECENTLY EDITED KNODES #CYCLE RECENTLY EDITED KNODES #ZOOM TO KNODE #KNOIDSPACE #KNODESPACE 

🕷️ Just to clarify: in the #EDITSPACE, only ONE knode can be edited at a time. Tapping #ENTER KEY with multiple knodes selected cannot open them for editing. Perhaps enter key should do something in this condition?: preserve the selection set but give a secondary (inset) selection highlight of individual knodes, which can be moved by the #ARROW KEYS within the set. 

Of course, a single knode may well contain multiple knodes within itself: when I choose to #EDIT such a knode, I would expect that I am given an opportunity to #SCOPE from that collection (remove or include nested knodes from their source(s)), and to edit other things such as styling (of the top-level knode). But not actually edit any content of the nested knodes or their individual properties. The question is: when I open a knode like this, with knodes nested inside it, where and how should it open? (A set of nested things is a KNOID, and knoids open in the workspace on the left... But it is in a KNODE, and knodes open in the editspace on the right.) Probably a new workspace tab should open, on the left.

🔖#BOOKMARKING (yes, with your browser) is undoubtedly the best way to get back to a knoid at the place you left  off... How might the platform tell that it is YOU again, without User ID or cookies or IP? So that we can keep you on the same branch of #HISTORY? Otherwise, we have to start a new #BRANCH every time you visit or refresh the page (because it could be anyone)... Even an anonymous #CLIENT doesn't solve that on its own. Perhaps it doesn't matter. If the new branch is just always treated as the main branch (you loaded a very specific knoid after all) If the very same point in a Knoid's history is loaded multiple times, only then we create a branch? So I'm working along, then bookmark (or take note of IDs) and close browser, then new session and load exact same knoid at exact same point: since there is NOTHING AHEAD OF ME I am the same editor. Whereas, if someone else loads that point after I have moved ahead, then it is no longer the leading edge, so a branch is made. Of course from their perspective (their history slider) they are on the main or central branch. But if they look at the history network diagram, they can see my branch (which may or may not be longer than theirs). LEADING EDGE IDENTITY (SINGULARITY?). Or Just The Tip entry (JTT) i.e. loading the tip of a branch behaves different than loading an arbitrary point along the stem... But then how do we tell the difference between a fresh load of a mid point and a history action load of the same mid point? History action would create a branch (which may sometimes be what the user wants...)? #IDENTITY PROBLEM #PSEUDO ACCOUNT #ACCOUNT PROXY

👑 #HISTORY SLIDERS: Suppose there are three sliders; one for content, one for styling, and one for positioning. Each can be slid on its own, and there is a handle at the top to slide them all together. Now, if I revert just one, then want to revert the other two together, the one should stay where it is, because I clearly put it where I wanted it. Ok. Now, every individual Knode should also have its own history sliders, right? But probably only content and styling, not position... But here's the rub: what if I revert an individual Knode, then decide to revert the Knoid history (all three) ? Well, now I'm reverting the reversion of the Knode, so its state is moved FORWARD in time, to the point where it diverged individually, then it reverts backwards in time in sync with the rest. 

#HISTORY: What are the save points? Major actions: paste, edit in Knode and then change Knodes, etc. Whichever sliders are still synchronized take part in Ctrl+Z/Ctrl+Y actions, and small text changes are included in the browser's memory navigated by Ctrl+Z and Ctrl+Y.

⛏️ #DRILL DOWN/SCOPE UP: The Drill Down button should be in each Knode (on hover) and the Scope Up button should be inside the workspace of each TAB (probably in the knoid header knode... No, wait the header knode itself should have it's own drill down button, so that may be confusing having both. Maybe in the tab?). Sometimes Drilling/Scoping is a kind of navigation. The Scope Up button should have a number next to it IF I am drilled down more than one level (during the current browser session, persistent across refresh). And I should be able to click it and see a small drop-down to navigate back up multiple levels at once. 

But wait! What exactly is the difference between MAXIMIZE and DRILL? Ideally they should be the same thing... But sometimes I am drilling down to sort of navigate to another Knoid, not necessarily change the scope...?

😛 Aaaagh. Okay. Instead of thinking "maximize" or "drill down" let's think of it as simply open to #EDIT a knode. I can only edit one knode at a time, and that should be whichever one I #DOUBLE CLICK (or click the #EDIT BUTTON, or #ENTER KEY) . It  should then "open" in the space to the right, while the knoid workspace remains open and squashes to the left a bit. Therefore #SELECT and #EDIT are totally separate (as is #HOVER). When I'm done editing, I can collapse the #EDITING SPACE, or double-click a different knode. I can #SELECT other knodes or sets of knodes at any time, and this has no effect on the one being edited. The #EDITSPACE So why #SELECT? To apply #STRUCTURE and #POSITION (alignment, etc), to apply #KNODE STYLING (as opposed to #CONTENT STYLING, to copy or group them into another knoid or knode, etc. And there is still the #SPACEBAR: if I use that, the targeted content object should either open in the editing space (for some object types) or be editable directly (for some content types, esp knode title/text). 

🗺️ #KEYBOARD NAV: Since the #SPACEBAR targeting drill is a single-click action, and does not #SELECT the knode, I may want to go directly (up) to the selected state of that knode: #ESC key is the obvious thing. #ACCESSIBILITY #EDITING 

👍🏿 #SINGLE KNODE SELECTION SET? However, if there is a #DRILL DOWN BUTTON available upon #HOVER STATE, then I can edit knode contents while still keeping active the tools to edit a selection of multiple knodes.

What is a #BUTTON anyway? Inside a knode, a BUTTON is simply a control I can click to activate, even though clicking on a knode would normally just select the knode. Duh.

👁️‍🗨️ And, ESC key again should move my #FOCUS up the current hierarchy: if current knode was part of a selection set, it is next level up (and should not be lost), next #FOCUS level up after that (ESC key) is the knoid workspace tabs (at this level the arrow keys move between #TABS, enter key or down arrow focusses a tab (activates it so again arrow keys move hover state around the knodes, starting with top left), and #TAB KEY moves between the workspace tab group, the editspace, and the menu group) Default, starting focus for the app is active workspace. #ACTIVE  AREA #STARTUP #PAGE LOAD #ARROW KEYS #ACCESSIBILITY #FOCUS

👕 VIEW/STYLE MENU/TAB(KNOID): Histories (of styles), Hide Knode Styles button, Hide Text Styles button, Hide Knoid Styles button, Layers (only whole knodes are hidden/shown with layers), SPACING, FIT, FLOW, Prefab Styles (darkmode, etc), Discover Styles (search and recommend style "templates" which apply to whole selections), #ALIGN GAPS (knodes are shifted a bit so they lign up), #MENUS #MENU GROUP

👔 STYLE TEMPLATES: With some (or all/none) knodes selected, I open the Styles tab to the right (by finding a "Styles" item in the APPEARANCE menu), then in the Styles tab I see a knoid with recommended style template knodes and a search/browse bar to find more. When that knoid opens, the "Copy Styles" function button should become active, and pulse to alert me that it is active. Once I see a knode with styling I like, I select it (single click).  I should instantly see the styles of the knode I click previewed on the selected ones at left. Also, next to the Style Template knodes, there should be several checkboxes: Border, Backgrounds, Titles, Text; which I can deselect/select to see those parts of the stylesheet applied to my selection on the left. #APPEARANCE MENU #TEMPLATES #STYLE #STYLE PAINTING #STYLESHEET #STYLE COPY PASTE

Alternatively, I can always find any knode in any knoid and copy it's styles by clicking "Copy Styles" in the VIEW Menu, then paste/ctrl-v onto any of my knodes (including a selection of multiple knodes). When I do that, I should get a pop-up dialog to choose Borders, Backgrounds, Titles, and Text, and again see these options displayed in real time on my target selection. Instead of "linked menuknoids", maybe better if there was a simple "Copy Styles" function that could be active/inactive in the Appearance menu group. And, when that is active, and more than one tab is open, and there are some knodes selected in first tab, then as I click on knodes in the second tab I see the styles of said knodes from said second tab previewed on said selected knodes of said first tab. And there is again the four options Borders, Backgrounds, Titles, and Text. And I can hold spacebar or double-click to maximize the source knode to preview styles from objects (strokes of vectors, design of icons). How to apply the chosen styles? Enter key, ctrl-v, paste button, or simply move the mouse back into the target knoid's workspace and click anywhere to change the selection... Done. #STYLES #STYLE COPY PASTE #STYLE PAINTING #CHANGE PREVIEW

Perhaps the #COPY STYLES BUTTON itself should preview (some of) the styles in it's current clipboard? This way I can easily see what is there, ready to paste... And it could even have a little back and forth arrow to move among the most recent styles copied/pasted... ? Tricky but sweet. 

Also, I should be able to simply Ctrl-C/Ctrl-V paste styles, this is done the exact same way: activate the "Copy Styles" function. In this case, the default is ALL (borders, backgrounds, titles, texts, objects) but after pasting, a little dialog should appear similar to the paste dialog in MSWord, to select/deselect those choices.

The "Copy Styles" button should show a little icon within it, like a clipboard, when there is something ready to paste, even if the button is not active. And when I visit the "Styles" knoid tab, the uppermost knodes are the recently used styles, so it acts as my Style Clipboard history.

So, the #COPY STYLES BUTTON should have 1.) A toggle button with 2 clear visual states, 2.) A clipboard widget with left/right arrows, 3.) A row of four checkboxes for borders/text/colors/ 5.) A "PASTE" button, 6.) An "OPEN STYLES KNOID" button, 7.) UNDO/REDO buttons (which only affect style events)

🍉COLOR SCHEMES:

😎 CONTRAST SLIDER:

💙 COLOR SHIFT SLIDERS:

🌚 DARK-LIGHT MODE SLIDER:

🛠️ "UNIFY AND FIX STYLES ACROSS KNOID" Button: does what it says on the box. Dialog asks me to select a few knodes that I am happy with. Is smart enough to respect alternating columns.


👩‍💻 Alternatively, I can edit any single knode's or knoid's actual CSS stylesheet, and copy/paste into it. The Stylesheets should be fully accessible by keyboard/control line inputs.

🌐 IMPORTANT: FAVICON FOR EACH KNOID: so I can easily drag it into a knode. Fastest workflow for building up my Account Proxy. The only thing in the tabs besides the name.

📦 DRAGGING KNODES AROUND? We are "de-emphasizing" the idea of putting knodes into knodes, so dragging them around normally DISPLACES (removes or pops-out). If you want to make a composite you have to use the SPACEBAR or SCOPE from another knoid, or use INSERT MENU, or drag over an already-selected SINGLE knode, or use the control line... If 5 ways to do it aren't enough, screw you.

🧚 GAP BAR WIDGET DOUBLE-CLICK: Ceates a new column of new knodes (width, heights same as left neighbor)... But this is just a shortcut! These knodes are not bound to their rows and columns! None of them are. They are just made here, each contains its own absolute position and size data. Again, how many times must I say this; the column and row selection and creation and moving tools are just shortcuts. WYSIWYG. Once we have SMARTS running, then there will be a dialog to fix alternating columns.

🌗 Also DOUBLE-CLICK any GAP to create a new knode. If in a column, knodes below are moved down; if in a row, knodes to right are moved right. Displacement (but not the knode shapes) is previewed by hovering motionless for 200ms (long-press for touch interfaces).

🌝 It's the same with COLUMN DOT WIDGET: It just helps select things... It selects any knode that has any part within the bounds of the width of the column, down to the last knode that isn't empty.

🎡 ROTATIONS: When I rotate a knode, I expect the contents to rotate with it. But again, it's just a convenience. The front end is just setting the ROTATION prop of the contents to be equal to the rotation of the knode. It  won't keep it that way. I should be able to rotate the contents independently. To do so I would expect to maximize/drill-down and have a feature allowing me to rotate any object arbitrarily. Or drill down further and set a rotation value in the stylesheet.

👶 #NEW: If I hit "new knode" while a single knode is selected, then I would expect a copy of the knode but without any contents. 
Whereas, if I hit "new knode" when nothing is selected, then I would expect a new knode (with no contents) which is just like the most common knode in the knoid. And if there are several knodes selected, I hit "new", I expect new copies of all of them... Up to a point. This shouldn't work if all knodes are selected, probably not even any selection over about 10. (Doesn't really matter though, the server only remembers knodes with content and those empty ones bounded by the lower-most and left-most knode with content, no other empties, including floaters.) [Does that mean the client must have a way to make empty knodes, to fill out the space?]

📋 Now, if I want to COPY CONTENT OUT OF a knode, of course i expect to either drill down, or use spacebar.

🐊 #SNAPPING: YES! This is always on in the beginning... Only later when we move away from grid-only models will snapping be optional.

💲 NEW ROW: ADVERTISING: 

🔩 API/ACCESS RIGHTS: The platform needs priveleged access to add metadata.

FREELANCER JOB SEQUENCE: 1.) cell component, resize/rotate/move widget, hover, select, drag. 2.) Workspace/grid, column DOT, GAP bar, group selection (ctrl, marquee), column selection (empty cell delimited), free-drag cells, column move, new column, scale column, scale gap, cell delete, cell merge, cell pop-out, 3.) tabs, dual workspaces, maximize (preview in tab to right) , border, background, divisions, menu, previews, text, titles, text styles, fonts, table header cell (with constraints), new cell (menu item widget: drag out animation), adaptive table standard cell, tab groups, standard tab groups (related to a table), 4.) CONTENT: 5.) Scoping, vector drawings, column/row header cells... 6.) widgets, interactions, intercellular connections... 

BATCH EDIT: When I am editing a style, border, text style, etc. of an object, whether deep in a knode or on the surface, AND I have other knodes selected as well, I would expect a pop-up dialog "apply this to similar objects in X other knodes?" With a checkbox.

🗿 HEADER CELLS: In a freeform universe, what is a column header? Well, what is a column? A column is simply a selection set shortcut. And therefore a column header is simply a shortcut to apply an algorithm, rule, or object to the other knodes in the selection set. To use a column header, I would expect I need a knode that spans the full width of a column (or the full width of multiple columns), and that knode is in rank 1, the uppermost position. [BUT WAIT! SEE DROP, BELOW. The DOT is the column selection shortcut. And we don't FORMAT! So there should be no such thing as a header cell... "Formatting" should only be applied per-action, not per-node. E.g. when I drop a new product into a new row, and I already set up/chose a template, then I clearly want to continue the styles of that template. But the template should be owned by the knoids, not the knodes. E.g. new knodes are added and the styles applied; instead of empty knodes created with the styles applied. There needs to be a lot of dialog prompts to determine the user's intent. For instance, if I create a new row of knodes between a white row and a green row, do I want the new row to be all green, or all white, or something else? In order to preserve statelessness, modelessness, and formatlessness, should the user be forced to constantly hit "apply template styles"? Maybe. One way to describe this is: We paint STYLES not formats. Formatting is a pain in the ass, as it keeps on applying itself. If we were to paint styles according to a style template ("re apply template styles") they can be conditional upon other rules, eg alternating rows from the top...  ]

🤡 #VENN (OVERLAP) is an unusual choice. I should multi-select the knodes i want in a venn group, then click a menu item. This should apply a VENN specific subset of style properties which are conditionally exclusive of other styles. #SMART API 

💧 Yeah, and if I want to #DROP anything into MULTIPLE KNODES, then I would expect to use the many options for #SELECTION SETS including the #COLUMN DOT. This means I can drop a style onto a column DOT and it will apply to all the knodes of that column, even though they never actually appear in a selected state. (But following true #WYSIWYG principals, this should just go down to the #LAST OCCUPIED KNODE in the column, or the ##DEFAULT COLUMN HEIGHT, not down to infinity. It will be easy enough to repeat the action if I extend the column later.) #FORMATLESS #WEB SOURCE OBJECTS #PARSING #MICROSERVICES #

🔌 #PLUGGINS: they are creatures of the front end. Pluggin idea: gravity. All the knodes fall to the bottom... Follow mouse... Explode... Vibrate, etc. It's just JS, CSS, HTML. #3RD PARTY #V2.X #NETWORK EFFECTS

♾ Everything is RELATIVE: knode "aspect" should be a ratio of width to height (then I can simply say knodexyz>3.4x1, and the size changes; or I can Ctrl+A>1x1 and they all go back to square ); knode corner radius should be a percentage (and perhaps have options like "cubic" and "elliptic"); knode shape should be actual shape names: circle, square, rectangle, diamond, hexagon, etc;.

🔳 SPATIAL UNIT: 1x1 should have a specific meaning. And scale down to a responsive unit of a 1x1 app icon on phone. 

🔳 But the DEFAULT KNODE DIMENSION is 1x1.6 of course 🙂

🧚 So I can easily set my whole grid by CTRL+A, 1x3, ENTER. OR CTRL+A, .x3, ENTER (the dot is the existing dimension). Or, likewise with any selection set.

⌨️ I should be able to start typing at any time. The #CONTROL-LINE is always active. It's context is the current selection set, and this should be shown in the control-line like a prompt. 

😶 Except of course, if I have activated a #TYPABLE-FIELD. And that includes single-click on #SINGLE KNODE (or selecting a single knode by any other method). Because when I do that, and start typing, I expect to be typing some words into the #KNODE TITLE. #KNODE TITLE AUTO TYPE... 

Of course, the typing could be echoed to the control line.

🤬Speaking of #KNODE TEXT When I am typing a knode title, I expect it to be one line, so if I hit return, I expect my typing cursor to move down to the #KNODE MULTILINE TEXT. And further more, I would expect the arrow keys to also be able to move around in my text. The multiline part of the text should not actually be a separate object. And it should be #FORMATLESS. It's like this: the first line is the knode title. What makes it a "title"? It simply has DEFAULT styles applied. It starts with font size 6,and bold, and inherits font-face, stroke, color, etc. If I keep adding characters, the font size decreases down to 3. And if I hit enter or the down arrow key, I move to the "body" or multiline part of the text, with a size 6 empty line between. The "body" is size 2, and can also inherit styles. BUT THESE ARE ALL JUST DEFAULTS!!! It's just a block of text with HTML! Even the blank line can be deleted. And they can all be overridden by inheritance... But even that just changes the defaults! None of this is persistent!

👩‍💻 There is always a knoid workspace active, so if no knodes are selected then the #CONTROL-LINE-PROMPT should say  "knoid's name>" and if a knode is selected it should say "knode a2>", and if a selection set is selected, then it should say it's name. #SELECTION-SET-NAMES #ACTIVE-WORKSPACE #COMMAND-CONTEXT 

🤖 BUILD GROUP/SHAPE AND SIZE/WIDTH AND HEIGHT WIDGETS: If I am resizing with the widget, there is a snap detent aligning the knodes with the gaps, and a visual mark on the slider control.(So if using the control line, do I need a friendly prompt to auto-align my newly misaligned knodes?) #BUILD-MENU #SIZING-WIDGETS #SNAPPING

I should also be able to enter a number... Should that be in a field in the widget? Or should activating the widget set the control-line context to the sizing function, whereupon typing (numbers) enters them in the control-line as the dimensions for the current selection...?

📏 BUILD GROUP/SHAPE AND SIZE/#ALIGN KNODE EDGES: Just a button. Click it to fix all odd dimensions within a selection set, or the whole knoid if none are selected. Quick tip: to align all column edges, first triple-click a column dot (or type "ctrl-A" followed by "col" )... Or to align all row edges, first triple-click a row dot (or type ctrl-A followed by "row"). Or type "align" and select from the search results "align all edges" "align column edges" "align row edges"... But there may be some "secret" commands if you use the control line: "align row centers" etc. #SNAPPING


MLP: COMPARIUM: (very simple) STYLE TEMPLATES, (very simple) PRODUCT TYPE OR CATEGORY TEMPLATES, MULTI-CHOICE COLUMN "COMPARISON CRITERIA", 

🤫 #SHARING MODE and #EDITING MODE: these are the only two modes. But the app is still #MODELESS, right? Yes. When I open a knoid with it's #SHARING ID, many functions are not available. These include knode sizes and shapes and layout and spacing and most styles, and I course any content editing. But there are still some style changes, basically #VIEW changes available: #DARK/LIGHT MODE SLIDERS, #CONTRAST, #EXPORTS, ETC. And of course I can still access any and all parts of the knoid.  #ACCESS #LOGIN #ACCOUNT #ID SCHEME #SHARING ID

We say it is "modeless" because it looks exactly the same: by strict adherence to #WYSIWYG principles, viewing and editing have the same UI and UX feel. #MODELESS

📔 #INTERACTIONS: especially #SORT, #FILTER, and #NEW ROW. These are things that I can add even when I'm using the #SHARING ID. Also #MEDIA WIDGETS. 

#STYLESHEETS should show inherited styles, in a greyed-out disabled way, and a comment explaining it: "/these styles are currently being inherited from the knoid. (The knoid has/has not a style template applied.) You can override inherited styles by inserting style rules targeting the same objects or classes (: or .), anywhere after those you wish to override. Any styles you add here apply only to this knode. You can also edit the stylesheet for the whole knoid ./" #USER FRIENDLY #KNODE STYLESHEET. Actually, there should not be any inherited styles. If styles are applied to the whole knoid, they should be individually copied into all knodes. So when I look at a knode’s stylesheet, I sees what I gets.

🍿 All #POPUP DIALOGS are #PLUGINS. All PLUGINS (in the context of a particular knoid) can be found in the knoid's #KNOID HEADER. Some have their own #WIZARD ICON, some collect their functions under a common WIZARD ICON, the #GENERAL (non-wizard, non-dialog plugins can be found under the #META menu item). Each WIZARD keeps a log of all it's interactions with the user and it's actions upon the knoid. When a wizard takes action, a message is entered in its log, and a sub-icon (#DIALOG NOTIFICATION) appears on its icon showing the number of messages. Once a user has seen a message, the number is decreased. Closing a POPUP DIALOG or scrolling through the log shows the system that I have seen a message. The message doesn't vanish, but the DIALOG NOTIFICATION goes away. If I need to see the message again, I simply click on it in the drop-down list of the #WIZARD'S LOG. IF the message was from a behind-the-scenes action, then I just read it and there is a verbose explanation when I expand it. Usually a message will pertain to some selection of knodes, and these will show some highlight and animation when I have clicked on the message (and perhaps some arrows pointing them out) If the message was from a POPUP DIALOG interaction, then clicking the message re-opens the original dialog, as well as highlighting the relevant knodes. (Many messages will eventually "go stale", when their effect is no longer present, or the affected knodes are no longer present; these should go to the bottom of the list.) The message stream should be sortable: chronologic, and relevance(default). When I expand a message, I see the verbose explanation of the function and a programmatic explanation the actual (contextual) effect it had. There may also be, when relevant: a link to more info, a link to search the #, a link to the author's #PLUGIN PAGE, some buttons to: select the associated knodes, revert the action, revert to the point in history when the action originally occurred... etc.

🔌 There are also #APP PLUGINS: functions which create the UI and UX of the whole app, not just a particular set of knodes in a particular knoid. These can be found in the app's #META menu. 

#SCALE/ROTATE/CORNER WIDGET: 8-axis scaling a selection of multiple knodes. But #ROTATE only works on #SINGLE KNODE SET. And #CORNER RADIUS affects all corners equally. If I want to radius corners individually, I expect to #MAXIMISE each knode individually. In the maximized view (#EDIT WINDOW) I can even give each of the four corners their own radius. But in the main workspace, the widget applies the same radius to all corners in the selection.

But what about #SCALE of multiple knode selections? I reckon, if the selection is all and only within a single column, then I scale NARROWER, then the knodes should scale and the column should stay the same (creating open space) ( if I scale WIDER, the COLUMN should grow). If the selection includes knodes in multiple columns, then scaling NARROWER or WIDER should shrink and grow all the columns in which knodes are part of the selection set.

😬 Select and #SCALE multiple columns: what should be the behavior if I click-drag across multiple #COLUMN DOTS? Maybe I intended to move the column, or maybe I intended to select a range of columns... So, if I click exactly ON THE DOT (pointer changes), hold rmb, and drag, then I am moving the column. But if I click NEAR the dot, within the #COLUMN TOP, and hold and drag, then the mouse pointer should not change, a marquee selection should begin, and I can drag to select a range of columns. (In other words, the DOT is the interface, when the mouse is not over that, then it is a pointer for selecting things, just like in Windows etc)

#NO PHONE APP: If we do our #RESPONSIVE job well, the thing will fit well on a phone browser, and menu items will simply not be available, reducing functionality. Reduced functionality is good! 

🍓🍒🍆🍑🥖🍋🥑🥒#REGULAR MENU BAR: Always present just above the workspace. #SNAPPING(toggle); #INVERT SELECTION (cascade for other selection options); #VENN/SHOVE/MERGE(toggle); #NEW KNODE(magic wand); #JUNK BIN; #NAME AND ID; #GAP WIDTH SLIDER; #COLORS (sliders); #CONTRAST(slider); #TEXT GROUP (#TEXT ALIGNMENT (toggle, center+justify is default), #TEXT COLORS, #TEXT SIZE, #FONTS, #BOLD, #UNDERLINE, ITALIC, #STRIKETHROUGH, #WORD ART); #DRAW GROUP(); #ICONS/EMOS/STICKERS/GIFS GROUP; #WIDGETS/INTERACTIONS GROUP; #CHARTS DROP-DOWN; #CLIP ART DROP DOWN; #COPY STYLES (toggle (w long-press for persistent)); #STRIP CONTENT; #COPY/PASTE(cascade clipboard); #SWAP ROWS/COLUMNS; #VIEW ONLY MODE; #HISTORY SLIDERS AND L/R ARROWS; #LINEWIDTHS (for #BORDERS , #VECTOR DRAWINGS, #TEXT, #DIVIDERS); #KNODE SHAPES (slider); #CORNER RADIUS(slider); #ALIGN/DISTRIBUTE;

#COLOR GROUP SLIDERS: #COLORS(actually selects #COLOR SCHEMES), #HUE, #SATURATION, #CONTRAST, #BRIGHTNESS, #BLOOM: these apply to any selection set. As always, if I want a change applied to the whole knoid, I expect to triple-click (or very-long-press) the leftmost and uppermost #DOT. If I want to change only an object (such as a border or some text), I expect to select it first. And If I don't have anything selected, then these color controls affect the UI, including the #KNOID BACKGROUND. But that effect, is not saved anywhere, so it will only last until the page (or knoid) is reloaded. 

#MAGIC FIX MENU (IN #APEARANCE MENU): #FIX FONTS, #FIX SHAPES, #FIX SPACING, #FIX COLORS 

#EDITSPACE MENU: #KNODE ID; #EDITING HISTORY; #FANCY BORDERS;

#DARK MODE? In the #VIEW MENU, there shall be some #HUES, #BRIGHTNESS, AND #CONTRAST sliders. These apply their changes to the UI, but brightness and contrast also DIM the knoid colors and background in a way that SYNCHRONIZES with the UI (dimmer only if the knoid is not already dimmer) These effects do not persist across page loads (they are not part of the API). Or, of course you can type "darkmode" into the control line.
#PAGE MENU: #FILE; #EDIT; #APPEARANCE; #DISCOVER; #HELP;
#VIEW ONLY MODE (aka #READ MODE, aka #FULSCREEN): Shall open automatically if I open a knoid with #SHARING ID, AND no other knoids are open. Wait... Isn't it #STATELESS and #MODELESS? Yes. The DATA is stateless. The API is stateless. The interface is however it is at any given moment.

Besides READ MODE, it is always easy to #HIDE the windows: the EDITSPACE and the WORKSPACE can be hidden with a click on their #DRAWER HANDLES. 

#DISCOVER STYLES TAB: Actually there should be TWO copies of this tab opened by default. One on the left by the knoid tabs, so I can use that to get styles for a single knode open in the editspace to the right. And a second tab by the editspace tab on the right so I can use this to find styles for the knoid over on the left. They are both just knoids, but when they open by default (page load) they are scoped according to their placement. Also, if I close these tabs, I can get them back by visiting the #APPEARANCE menu.

#CTRL+C/ CTRL+V and #CLIPBOARD behavior:  Ctrl+c copies anything selected when somewhere else on my computer, of course. But if I select some knodes, AND THE #COPY STYLES BUTTON IS ACTIVE, then only the styles are copied. It acts just like "format painter". (#CONTROL LINE should say "styles copied")

CTRL+V, when some knodes are on the clipboard,pastes them into the knoid over which the mouse is located. If one or more  knodes (in said knoid) are selected, then an attempt is made to fit the new stuff to match the existing stuff. Otherwise, if none are selected, the new stuff shall float.  If the new stuff is not knodes (or styles) then a target must be used, either a #DOT, a knode, or the #drop target. 

Ultimately, we must develop algorithms sophisticated enough so that all sorts of "stuff" and "things" can be simply drag-dropped onto the #DOT. And onto


Even though the app is #STATELESS, a knoid should store it's app "state" in this way: When I open a knoid with its #EDITING ID, (eg I am on the LEADING EDGE) then other #TABS should be opened to the scope they were last at. For instance, the standard STYLES tab may be in a scope relevant to the knoid I was working on. I may have had  another knoid open which I was borrowing from. Since any knoid can be retrieved by it's SHARING ID + SCOPE, it should be easy enough for my knoid to open these others in tabs how they were when I last was editing. The app should determine programmatically which other knoids I was using simply by checking what knoids were both open (in other tabs) and also contributed any material (objects) to the knoid in question.

Likewise with #EDITSPACE TABS: I may have several knodes open in editspace tabs, as well as in the #EDITSPACE HISTORY. Those tabs and history are not really "state" but they should be stored along with my knoid as part of the #JSON DOCUMENT. And open when I reopen the knoid. 

Opening multiple #EDITSPACE TABS should be discouraged. Perhaps two is enough. Instead the tab itself gives access to recent history of knodes edited. So the normal workflow provides MANY ways to open a knode normally into the EDITSPACE. But there shall be one or two workflows to open a knode into a #NEW EDITSPACE TAB: right-click (or long-press) the #EDIT BUTTON, or drag the knode to a new editspace tab position. 

No that it matters much, but when there is a #MULTI-KNODE SELECTION, it can be #DRAGGED from any point, even voids and gaps and such.

#KNOID MENU: #METADATA, #COMMENTS, #CITATIONS(drop-down), #TAGS, #FLAGS, #STYLESHEET(opens in EDITSPACE),

#BORROW ANYTHING FROM ANY KNOID OR KNODE:  I can find a knode I like, in some knoid somewhere, and simply drag that knode to my knoid. If the #COPY STYLES button is toggled on, then the #CONTENT is stripped (#CONTENT STRIPPING). If not, I can click #STRIP CONTENT, which will leave all the #STYLES #BACKGROUNDS, #DIVIDERS, #WIDGETS, #BUTTONS, #ICONS, #TEXT FIELDS (replaced with lorem ipsum) ETC. 

Or, I can #MULTI PASTE / #MULTI DROP: I find an #OBJECT I like in some knode of some knoid... I select it and either drag it or #COPY it (Ctrl+V or "copy" button). Then I move over to my knoid in progress, and drop it or paste it onto A SELECTION OF MULTIPLE KNODES. The object (or just its STYLES if COPY STYLES is on) shall be copied into EACH OF THE TARGET KNODES. Where? In the same #POSITION as the source. What if there is a conflict, something already in that position, or a very different knode that has no similar position? 

#METADATA: #ALL SOURCES menu item which opens a #PROCEDURALLY GENERATED KNOID having a knode for each SOURCE, including websites (scoped) and other knoids. The title of that shall be "Sources for knoid 123pqr456xyz". And in this knoid there shall be a large button "Open all web sources in tabs", which, you know, opens them all in browser tabs. Another button "open all knoids", which does just that (in workspace tabs).

#NEW KNOID FROM NODES: Just drag them to the #NEW TAB widget. If it's your knoid you are working from (you are at the #LEADING EDGE), then you can #CUT + #PASTE by single-clicking (or #TABBING to) the #NEW TAB widget, and then Ctrl+V or RMB or #PASTE button.

#COPY STYLES? This may be toggled on, but if I #CUT from my knoid or knode, the next #PASTE operation shall paste not just the styles, but the whole thing including content. Otherwise it could be lost. 

#SNAPPING , #ALIGNMENT , #BAR WIDGET ... Every knode edge has a #BAR aligned with it. If there are a bunch of weirdly placed and sized knodes, then there are a lot of BARS. They are just like the TAB STOPS in a word processor. They are used as snapping points when #SCALING and #MOVING. Midway between each pair of BAR WIDGETS is the #DOT WIDGET. It selects ALL the knodes lined up with it, even if that is just one knode. 

THE #GAP: The GAP is padding between rows and columns. Normally it is the same everywhere, but can be scaled individually or collectively using the #BAR WIDGET or the #SPACING SLIDER (in the #APPEARANCE MENU). The #BAR WIDGET is aligned with the center of the #GAP.

The magic #CLEAN UP button should have multiple clicks: a little, a little more, all.

#PUSH DELETE: when using the #SCALE widget, EMPTY knodes, IN A ROW being #PUSHED aside, should be DELETED, IF THEY ARE PUSHED OVER BY THEIR ENTIRE WIDTH AND THERE ARE OTHER KNODES IN THE ROW WHICH HAVE CONTENT. This is a tricky algorithm. 

#STATELESS: long story short, any "state" must be part of the JSON. 
[/NOTE]


[NOTE]
WORDS

Knode Knoid

Comparium Comparuum Comparion 

Relativit 

Iosis (Symbiosis)

Word Processor? > Knode processor! Clipping Processor.. Web Processor. 

fuckety dooh dah
[/NOTE]

[NOTE]

WHITEPAPER

Internally Generated Content:
•Moderation (by third-party freelancers via COLLABORATION ALIASING)
•Badges (by us)
•Stuffing (by third-party freelancers via #COLLABORATION ALIASING)
•Branching (special case sites)
•Templates (by third-party freelancers via COLLABORATION ALIASING)
•Apps/algorithms (by third-party via SDK)

THE KNESTING PROBLEM: Many, perhaps most, knoids can theoretically be placed into a nested superset wherein each knoid is a relatively narrow treatment of a broader subject. This raises issues for the community and individual users regarding knowledge discovery and simplicity. It makes it difficult for the platform to recommend related content and to recommend a simple path for creating focused content, because it may be very difficult to determine algorithmically what level of abstraction a user wishes to address. Basically, it would be nice, if the algorithms could determine the user's intent to produce one of three possible things: a #TRUNK, or a #FRUIT. Actually, everyone wants to make a fruit. But often they may be distracted into making several fruits and a branch. It would be great if we could recognize that, and help the user make each fruit it's best.



User-Generated External Functions:
•Authentication
•Embedding
•Sharing

Internally Generated external functions: •integrations, •client,

🧐 AUTHENTICATION, 

🖖 VERACITY, REFERENCES, CITATIONS, 


🥫 #JUNK BIN (feature): a place to stick things that may not be needed. Could also act as a #RECYCLE BIN for deleted things. Especially nice for #POPOUT knodes when you don't know where to put them. Maybe a small UI icon in Title Knode? It shall be a knoid of its own, of course. In fact, it is just like a #VISIBILITY LAYER, but has a name ("junk bin") that cannot be changed. Or, we could leave it up to users to create their own: just create a named visibility layer,...

👁️  



💀 #KNOID HEADER KNODE /#TITLE KNODE: It should be resizeable, and moveable left and right. But it can't be deleted. It has a fixed structure. It can have a background including image, but it is desaturated. And it can only have a few words as it's main object (the knoid title). The main purpose of the knoid header knode is to hold all the widget buttons for knoid-wide functions: junk bin,  #CONDITIONAL CONTENTS


↕️ SCOPE UP/SCOPE DOWN: What should happen if you try to SCOPE UP, and you are already at the "top" level? Wait, what is the top level? The regular view of a Knoid with no knodes maximized... And when you SCOPE UP from there, you should arrive at any Knoids which instance that Knoid in a Knode... And if there are none, then create a NEW Knoid with the one you just left as a Knode in it (where?).  But what if MULTIPLE Knoids instance the current Knoid in their knodes? Then I s'pose there would have to be UI to choose which one you wanted to scope up to... And I reckon the upper one chosen should be opened in a new tab. And I figure if the case is the same but the upper Knoid is already open in a tab, then you should just go right to that one (so you can scope up and down to navigate between tabs just like clicking the tabs directly). And there should be UI to bypass that, go directly to a new one or a different one that isn't open in a tab. Just open a new tab and then a new Knoid... Opening a new Knoid of course by searching a network diagram of relations to Knoids that are currently open. It all goes around and around doesn't it? Fuckin heck, there's a certain demented logic to it, though, isn't there? #WHAT?

How then will I copy a ROW from one Knoid into my Knoid? Well, as everyone knows,I select multiple, then drag/drop/copy/paste into a #ROW DOT (or a #GAP)... Voila. This should be our starting point for multi-object clipping/parsing. EDIT: Just drag the DOT, that's the quickest way.

#ROW DOT or #GAP BAR paste/drop? What's the difference? Well, if I drop stuff onto a gap, I'm clearly trying to create a #NEW ROW with that stuff. Simple. But if I drop stuff onto a DOT, what is my intent? It is probably to ADD the new stuff in with the existing stuff. And there needs to be a consistent way for this to happen. If the row is empty, no problem. If there is a #CONTENT TEMPLATE in place, then the app can try to #PARSE the new stuff into matching columns, no problem rationally, but not trivial. May require a dialog popup. What if there is no "content template" (whatever that is)? Well, if I am dropping things, and expecting the app to treat them as multiple things, and know how to separate them into distinct things, (let alone put them into multiple rational places) then I am certainly talking about rather heavy duty #PARSING. This is probably a #V2 feature. And remember; a "content template" is not necessary added by the user; it should be something the app builds automatically i.e. every knoid should try to build a template of itself, so as to know how how/where to parse things into. #AUTO TEMPLATING

🔎 #SEARCH: It needs some anchor in reality, since "social network effects" are very minimal, thus reducing the utility of importance-based search algorithms. The right anchor to use is probably the #WEB SOURCE... Every knoid must have atleast one world wide web object clipped. As multiple knoids clip from a single web domain, those docs should increase in "importance". Other factors in the #IMPORTANCE ALGORITHM? Well, network (connections, re-used knode instantiations, etc) is in there, but even higher weight should be given to "similar" docs, regardless if they have any connections. Similar to any docs currently open in tabs, that is. But maybe search should ultimately be tweakable, for instance, a user could switch off that "similarity" factor or the internal "importance" factor, or even move sliders to change their weights, or re-order them in a list to change their weights... Whoa. Especially handy if someone is searching for STYLES or TEMPLATES rather than content... Those factors could be weighted up. Of course,  big factors in IMPORTANCE will eventually be #KNOWLEDGE IMPACT and #KNOWLEDGE INTEGRATION PHASE.

🎩 Ooh, feature: #IMPORTANCE should be viewable by users, it lives with the METADATA accessed from a Doc's header. #DISCOVER #SEARCH ALGORITHM

🆎 Ooh, funny idea: A/B testing? How about if, when a user is frustrated, and they look in the help menu... They can simply load another variant from the pool. And, right there in the HELP drop-down, there is a list of variants with their percentages deployed. And of course, a link to view the changes and give feedback on the variants (as a Knoid, in a tab... Duh). #HELP MENU #OPENNESS #A/B TESTING #DEVOPS

🦈 #SHARE: When sharing by email (and perhaps a few other channels), I don't want to just share a link, that's annoying and nobody will open it. I should be able to share the actual Knoid, or a scope of it in HTML email. How does Slack and WhatsApp do the preview thumbnail when I share just a URL link? #EXPORT #SHARE BY EMAIL #HTML EMAIL

‼️‼️‼️go.designrr.io‼️‼️‼️Makes brilliant ebooks and reports by cleverly scraping any web page ♥️♥️♥️

🖨️ PRINT/PDF export (#SLIDESHOW too!): A new tab is opened, with several large knodes. Each such knode is representation of a page of knodes from the Knoid being printed. At first, they are all crammed into one page, and the other pages are blank. So I drill down and scope up. I drill down and select the knodes I want for that page, hide layers, filter, sort, adjust margin, change paper background colors, render resolution, edit text styles for the copyright statements, etc. I can also hold spacebar and drag knodes between pages. EDIT: Actually, that's kind of annoying. Can't I just drag the page borders (in this print preview knoid) like Excel? #PRINT #EXPORT #PDF #FILTER #SORT #LAYERS

🛰️ #SPACEBAR: holding spacebar is like a floating drill: I can directly select text within a Knode without selecting the Knode first. Or any other First Child, such as list items or knodes in collections inside a node.

#SPACEBAR: Also for #DROPPING knodes into knodes. Common workflow is drag and drop. Drag and drop is how I can add ABSOLUTELY ANYTHING to a knode. But when I'm dragging in or dragging around, a whole knode, then I normally expect it to DISPLACE existing knodes (empty knodes should vanish and the incoming knode should resize to fit the space... Non-empty knodes should pop out.) But, when I want to make a knode of many knodes, I should just hold SPACEBAR, then I can drop the incoming knode INTO an existing one. Alternatively, for touch interfaces and just more options, IF a #SINGLE node is selected, then I can drop an incoming knode INTO it, and it doesn't get displaced. #ACCESSIBILITY

🐇 Overhang Objects: I may want a picture to protrude out of its knode, especially a graphic or vector or clipart or cut-out image. So I should be able to simply change the objects size and positioning within the Knode, including making it bigger than the Knode. Just maximize the Knode and make the adjustments. Of course I can also change the border color to clear so the object appears outside of a cell... Or I could make the border "clear" and draw an inner rectangle inside to appear as the cell border. Using these tricks I can make a collage of art objects on a page that appears to have no cards. Do I need a special UI feature to show the cells then? The Column Label Widget (DOT) is it! Just hover, click, double-click, triple-click, or drag as usual.


!DEPRECATE 📏 SCALE ALL (or multiple) GAPS: Instead of a "fit and flow" widget in the menu; you could select multiple columns (click the DOT, hold shift), and then scale them NARROWER using the bounding box widget. Each GAP should change width by the same absolute measure as the mouse drag, not a percentage.

!DEPRECATE! 📏 SCALE ALL (or multiple) COLUMNS: Same thing with the COLUMN DIVIDER WIDGET | 


WAIT A SECOND: CONSISTENCY!  Let's have the DOT be the column widget; selecting, moving, scaling. And the BAR be the GAP widget; selecting, scaling, inserting new... Therefore, the GAP WIDGET should have the two-way slider appear to scale the gap(s) on either side depending on which way I slide the widget.

This makes sense because: the DOT is just a SELECTION shortcut for selecting whole columns and the BAR is just a SELECTION short cut for selecting whole GAPS. THEREFORE: if I want to scale the gap or knodes in any wacky selection group, I should just make my selection and use the widgets. 

This makes it easyish to make a large quasi-merged region of several knodes when I want multiple objects in my region (I just put one thing in each, and remove the gap and make the backgrounds the same) (though usually it would be better to add multiple knodes into a node, style the parent and make the children noBackground/noBorder) (See SPACEBAR above).

What then of DELETING a column? Should the Gap remain open, or close up? I would think it would close... But what if my intention is to clear some space? I want to be able to clear some space quickly! Ah! Select a whole column by clicking the DOT, and hit delete, makes an empty space BUT KEEPS THE DOT BECAUSE THE COLUMN IS STILL THERE IT JUST HAS NO KNODES IN IT (actually, it may have some, if I deselected some). If I want a new column of empty knodes I can just double-click the BAR on either side and THEN SCALE THE GAP DOWN (scaling the GAP should have a snapping detent at the same width as it's neighbor to the right) [But that's a little weird: this implies that a knode must exist always in some row and some column, rather than in free space... Which isn't great. It also implies that GAPS are concrete things that exist even if there are no knodes next to them... And likewise with rows and columns. However, I want to be able to work in FREE SPACE. E.g. if there is a wide GAP, then I may want to put a knode in it, which is not at all within the adjacent column. Perhaps (if the rows/columns/gaps ARE concrete) then a new column shall be created thus and to fit said new knode. Which kinda makes sense, and goes along with the idea of a "minimal knode size".]


🦐 #MINIMUM KNODE SIZE: Knodes should not be allowed to be arbitrarily small. The smallest size should be related to viewability on a small smartphone or watch. #RESPONSIVE


🐋 How about a #MAXIMUM KNODE SIZE? Yes, definitely. It should be related to a screen as well. And if I want a long or #OVERFLOW text document or PDF etc in a knode, there is the #KNODE SCROLL BAR of course. #RESPONSIVE

📏 #SCALING THE GAP: Should have a sticky detent at the same width as the next GAP to the right.

🐤 #NEW COLUMN: When I double-click the BAR to add a new column, those new knodes should be of same #SIZE, #SHAPE, #BORDER, and #DIVIDERS as the knodes next to them (on the left). If any of these knodes is created in a place that has no neighbors at all, then use the Knoid's #DEFAULT KNODE. #SELF TEMPLATING #EMPTY KNODE STYLES #MODE OF KNODES (MOST COMMON)

🤠 #DEFAULT KNODE: each knoid should have a default knode. This starts off as the app's default knode, but changes to the most represented SIZE, SHAPE, BORDER, and DIVIDERS.

✂️ And speaking of space... What if I clear all the space (or delete all the knodes)? Then I need some UI to add new knodes in... And if I have that, then surely I want several options so that I don't always have to start with the same boring rectangle. And if there are several common options, shouldn't some of them be based on knodes in the current session? #KNEW KNODE FUNCTION #BUILD MENU #SELF TEMPLATING 

◻️ #FIT AND FLOW: The GAP WIDTH horizontal and vertical sliders in the view menu (which affect the whole document if there is no GAP selected - either a gap, or two or more adjacent knodes.)  should increase all affected gaps equally when increasing. When decreasing, it should decrease all affected gaps equally until ANY ONE AFFECTED GAP gets to zero width, then the zero width ones stop scaling down and the wider ones keep getting narrower. #SCALING #SMART SCALING #BUILD MENU

📏 Of course I should have a "equalize all vertical gaps" button and an "equalize all horizontal gaps" button and an "equalize all knode heights" and a "equalize all knode widths" button. #BUILD MENU #FIX #SNAPS #FIT AND FLOW #EQUALIZE

 

❓❓❓ #ACCOUNTPROXY: ramification: If the Knoid ID is ever changing, then I need to write down the ID whenever I close the browser on my ACCOUNTPROXY... Or, if I use my browser bookmarks to retain my ACCOUNTPROXY, then I need to re-bookmark it.

ACCOUNTPROXY: It should be able to retain a record (knodes) of my recent activity, including latest edits and open Knoid's and metaknoids. But I must remember to re-bookmark the ACCOUNTPROXY itself at the end of every session! #PSEUDO IDENTITY

🍉 #MENUKNOIDS and #MENUKNODES are UI functions which link directly to the open Knoid (whichever tab is active if multiple tabs are open) They can be interacted with of course, according to how they were made (i.e. filtered, sorted) but I can't "build them out" like my own Knoid (which is always true. I have to clone) EDIT: Isn't this functionality covered by the #DRILLING and #SCOPING functions? At least if there is #KEEP SYNCHRONIZED option #RIGHTS #PSEUDO IDENTITY

🎱 #COMMAND/GUIDE LINE: Just like Rhino, but lots of aliases and flexibility. Rhino runs a search function when I start typing a command. Also like Rhino, it tells me what to do next if I issue a partial command or there are multiple steps required.
   :select, enter [with no other specifier would select all]
   :select r7 [selects entire 7th row]
   :select r7 -c1..c4 -c7... [Selects only cells 5 and 6 in row 7]
   :sel r7 c5..6 [same as above]
   :sel [alias for select]
   :search/:find, :filter, :sort, :goto, :deselect/:unselect/-[], :..[range inclusive], :...[from start/to end], :add/get/insert [object], :menu 
  


‼️  Hypercard Player:

🔭 WHAT IS A SCOPE ANYWAY? : What if I make a knode object from a certain website, and then change the scope  a tiny bit? Should the knode have the same ID, or a new ID? What if I want many copies of the same object in different knodes; should they each have their own ID? What about the same exact object and same exact scope, say a vector image, but used multiple times in multiple Knoids and with different styles? What if I make a knode of an image, then change it completely, change everything about the knode and its contents; should it still have the same ID? Clearly it could be a problem to tie the ID system to the scoping system. But then what? Aren't all the IDs constantly changing, with every little change of the contents, both Knoid and knode, so that each point in history has a unique ID?

Maybe the ID system should be tied to the state of knoids...? Each new knoid gets a new ID, each of it's knodes gets a new ID, and they all just increment with every change? That makes a bit of sense, but what about instancing? I guess in this scheme, all the unique stuff about contents is just sort of metadata: web source and scope. But then, why increment the IDs at all, if it's just for history? Surely there is a simpler way to store historical states, that isn't mixed up with  the IDs at all. Isn't the purpose of knoid IDs really for editing rights restrictions? (sharing/editing ID)  And simply for API/retrieval... Metadata can be used for building connections between things across the platform.  

♟ Drill Down/Scope Up: on any object, including knodes and knoids, when I drill down I should be taken to the place from whence that object originates. If it's an icon or clipart etc., then I should see the whole set (from whence it came) (a knoid) of the available choices. If it's a website, I should see the original website.  

🍫 On the other hand, if I just want to modify the object, I shouldn't have to drill down further (than the first maximized view): I should just select the object (single click when in maximized view; single click+spacebar when in top level) and then the edit tools (corresponding to that object) should appear. To change colors, fonts, strokes, etc. In other words, WHATEVER IS SELECTED, THE TOOLS FOR EDITING THAT SHALL APPEAR/BECOME ACTIVE.
 #CONTEXTUAL TOOLS

🤐 This means there are two things happening in most cases when in #DRILL DOWN state: 1.) Editing an object and 2.) #SCOPING i.e. selecting a new object from the original choice set, or modifying the extents (scope) of the original choice. 

🔭 Are there only 2 kinds of #SCOPE? 

⬇️ When I first drill down on a knode (double click) it maximises and the primary object is selected with the corresponding edit tools active. Of course, if I was holding spacebar when I double-clicked, then the edit tools for the targeted object should be active. #DRILL DOWN #MAXIMIZE #SELECTING KNODES #DEFAULT SELECTION #SPACEBAR #ENTER KEY #CONTEXTUAL TOOLS 

🤺 If it wasn't already clear, I can only #DRILL DOWN on a single knode. #SINGLE KNODE SELECTION SET

"Post Production" microservices...

MICROSERVICE: PDF/print view generator

MICROSERVICE: Citation/Bibliography generator (for User).

MICROSERVICE: Reference and Copyright metadata generator (for knodes)

MICROSERVICE: Reference/Copyright updater (for knodes)

MICROSERVICE: Copyright notice generator for PDF/print generator...

MICROSERVICE: Email sharable HTML summary generator...

MICROSERVICE: Procedural knoid generators (for search results, more) 

#STATELESS #MODELESS: When I want to change something about a knode, I click the button to edit it. But this changes nothing about the knode. I edit it in the window to the right, and the changes are applied to the knode on the left, and to the #JSON doc via the #API. But I can still interact with the knode in all the same ways over on the left: I can move it around, resize it, even pan the workspace away from it. It isn't in another mode. AND, I can refresh my browser (and delete all cookies): whatever changes were made were made. To make more changes, I just find that knode again and click the button again to edit. It was never in another state. #EDIT BUTTON #DRILL DOWN #DOUBLE CLICK #ENTER KEY #MAXIMIZED #EDITING SPACE #LIVE PREVIEW #REDUNDENCY 

#REDUNDENCY: There are always multiple ways to do things. For instance, in the #EDITING SPACE, there should of course be some way to see/change things like dimensions and locations... But these things are normally changed by operating the #FRAME WIDGET, in the knoid workspace. Therefore, those things that are normally done WYSIWYG in the workspace, don't need to be as easy to get to in the Editing Space. They can be in a menu or buried a layer down or in a stylesheet.

Wait, WHOSE RESPONSIBLE FOR THE DIMENSIONS AND POSITION OF A KNODE? At first take, it may seem to make sense that a knode would have #LOCATION, #DIMENSION, #SHAPE values. But maybe those are rightly the domain of the knoid. At least the first two probably are... However, it might be annoying if, i am looking for a knode's dimensions, and I can't find them in that knode... 


©️ #LICENSE : Each and every #WEB OBJECT (or #EXTERNAL OBJECT) needs to have a license listed in it's metadata. #INTERNAL OBJECTS also have a license field; and they are always one of the permissive open source types, hopefully MIT. Internally created stuff is MIT. But we will source many other objects; such as fonts, icons, clipart, cc images,; which may need to have their original license reiterated and even an #AUTHOR CREDIT. #IP #PLAIGERISM

The platform can use license metadata to enforce #POLICY and comply with #LAW. For instance, to stay within a theoretical #FAIR USE safe harbor, we may track the percentage of a copyrighted source that is clipped into a knoid, and what percentage of a knoid is from any single such source. As long as both those numbers stay below some threshold, we should be fine. 
[/NOTE]

[NOTE]
IDENTITY PROBLEM

1.) WHY? First Law: everyone can access and everything must be accessible. 

2.) Parental filtering

3.) Personal attribution, authorship, ownership, and proper names...

4.) History and flux... And deletion, for that matter.


5.) Personalization and taste... The restaurant example...

6.) Convergence, divergence, broad cases, narrow cases...

7.) Antisocial Media: what is the meaning and value of "feedback", "likes", favorites, shares, ratings, thumbs, comments, and even views or popularity, when there are no individuals doing these things?


🌹 The absence of personal identity (and it's ramification of BRANCHING (divergence), may act as a strong BUFFER reducing network effects in some cases. (For example "Fave Restaurants" or "my list of hated companies") The solution should lie somewhere in the SEARCH/DISCOVERY service and the closely related FILTERING service. If DISCOVERY involved filters or "switches" that let users see both POPULAR (network effected) and some kind of non-network-effected result (maybe algorithmically related to current docs..?), side by side..

🐉 TRIMMING THE TAIL: The ID public/private problem will lead to lots of branching. But many times someone will inadvertently create a branch (they lose their ID and so clone the knoid to make a new ID to keep working) From the platform's perspective we can't tell that it isn't actually a new user... Or can we? The original branch would soon appear abandoned, and we can clean up the branching network after a few weeks of no activity. Or atleast archive it, and delete it after a few months. Also, to make it seamless for the user in this situation, when they clone, they clone the history too, right?

🐿️ WAIT! How does it work with the Dropbox sharing link? "Anyone who has the link" --can edit... Isn't that a form of logging in with no login?
[/NOTE]

[NOTE]
RHETORIC

It's not just for comparing PRODUCTS. Using the same core feature set, you can compare just about anything: words, sentences, paragraphs, articles, books, publications, ideas, people, animals, plants, ideas, topics, subjects, recipes, plans, comparisons (yes you can compare comparisons), comparators (A universal comparator can compare comparators, of course.) , skills, jobs, images, names, memes, sounds, videos, programs, companies, services, brands, features, actions, events, incidents, stories, laws, instructions, apples, oranges, hawks, handsaws, etc. And this should by no means be considered an exhaustive or complete list.

But what is meant by the word "compare" anyhow? 

It means putting things in a common reference frame. Putting multiple things in a place where they can be seen together, in relationship to each other. 

Or, maybe even putting multiple things in multiple reference frames, and trying to see what they all look like relative to one another in different contexts.

⌛ The FLUX PROBLEM: 
[/NOTE]

[NOTE]
Use Case Scenarios

📸 Flash cards such as "bits of intelligence": multiple objects on a card. Possible stand-alone breakout app...

Two broad classifications: PERSONAL: no broad vertical connections. A "personal" document may not be a part of any theoretical hierarchy. No one can argue as to it's correctness. It is arbitrary and impressionist. 

A REAL WORLD Doc on the other hand is relative to real things, and can theoretically fit into some real hierarchy or ...? Bollocks. More of a "spectrum", i'nt it?

👔 Business/startup/entrepreneurship resources superstructure: I want a Doc for practical stuff and one for motivational. But each of those can be broken out...

🚗 Cars... Trucks... Vehicles superstructure: I want a doc to compare ALL vehicles ever made!!! MADNESS!! IMPOSSIBLE!! Or is it? And loads of SORTING and FILTERING...

This raises the issue of "integrators"; people who will tie many Docs together into hierarchical structures. There needs to be be features to support this! Templates!

‼️ Hypercard Player

🎲 GAMES! Chess..

LIST OF BLUE ANIMALS: A comprehensive big list, with several categories (blue pigment, blue diffraction) and #SORTS. This is a nice concise "academic" research report that will require a dozen or so websites. It can be presented in a few tidy infographic-like posters.

🎭 WHO IS SATOSHI NAKAMOTO? A rambling mind-map of concentric rings with sectors for candidate suspects and snippets of supporting evidence arrayed outwards in order of decreasing strength or veracity.
    

🌾 Wheat v Barley: or X v Y for that matter. Again, wouldn't it be nice if Google could parse out an X v Y search, and give an instant answer compost from several websites? Well, they can't. That's why knoid. 

🥧 Compare laws, rules, regulations, customs, ways of doing things... in different countries etc. This could be for travel (driving rules, boondocking) or it could be used for political/social progress: how do they do university costs in Bulgaria v England v France? 

🌻 Solar panels/battery bank/grid tie/balance of system/pay back tarrifs/tax incentives/etc.... Lots of parts (and some services) how do I put together the right set for my house, in my area, with my budget? (A use case for #CONNECTION LINES)


NEWS TRACE: Suppose there are events in the news of which I want to make clear the sequence and chronology. Who said what and when?, When did what happen?, When did a particular piece of reporting appear and where? Are there contradictory reports or chronologies being presented? ... So I start Googling. And reading. And copying and pasting. Soon I have a lot of stuff in a big folder. Bookmarks, MSWord files full of copied text. A Google doc or three.

    
[/NOTE]




[NOTE]
ARCHITECTURE

🗿 Microservices? Monolith? Start with a "structured monolith", something that has clear strong boundaries within. Then maybe it can be pulled apart into services.... Allard Buijze

🕰️ Eventual Consistency should be just fine. We don't need tight consistency.

🆓 https://eventstore.com/

🎈 Event Sourcing "like version control for your software state"...Martin Fowler/Thoughtworks  https://youtu.be/STKCRSUsyP0 23:30 

🎈 The ID system is 90% of our API: Since each Knode and each Knoid contains a complete description of itself, including history, positions, styles, and objects; then most actions simply involve stating an ID number, and stating either a change or a copy. Each Knoid and Knode should have it's own event source, so it can be reproduced any time any where. #DOMAIN OBJECTS #RESOURCES 

🚯 No payments_service, no login_service, no user_service, no auth_service, no checkout_service, no profile_service

📜 APIBUILDER.IO (recommended by Michael Bryzek)


☘️ REST, GRAPHQL, OR GRPC? Try making an "eligibilty matrix" ala https://sensedia.com/en/api/apis-rest-graphql-or-grpc-who-wins-this-game/

🛅 A knoid has a #POSITION, a #SHAPE, and a #DIMENSIONS field for each contained knode, and these cannot be empty or null.

➰ Each knode has a #RELATIONSHIPS object, which may be null. Relationships are basically mutual rows and columns with other knodes and vertical/horizontal "ranks" which tell us where to place it relative to others. It would be null for a knode when it has an #AMBIGUOUS POSITION. Each Knode also has a #CONNECTIONS object, which may be null. Connections are #FORMULAE and #CONNECTOR LINES (which are just graphical formulae).

A Knoid has a #STYLES object, which may be null (if null it would inherit the #APP DEFAULT STYLES). Each Knode also has a STYLES object, which may be null. Adding a #STYLE TEMPLATE to a knoid (applies some styles to contained knodes) should be a one-time ACTION: if I later change the knodes, they should obviously retain the changes. Just like using a drop target or Knoid header to drop multiple web objects for parsing, we are dropping multiple style settings, and it isn't persistent. WYSIWYG: no formatted anything! Don't even piss me off!

SOME DOMAIN OBJECTS: ? 
A Knoid
A Knode
A template
A structure?
A plug-in?
A menu?
A search
A network of related Knoids (history)

🥃 Equal Standing: Why should it be a server-client relationship? If the back-end is a bunch of services sending messages (events) to each other, why can't the front-end be seen as the same thing? In fact, the deepest realization of MICRO FRONTENDS may be to have the front end split into distinct services, which emit events to both a front-end event stream and the back-end event stream. And there really is no difference between clients and servers... They are all services emitting events. 

🗽 STATELESSNESS: Knodes have several states (hovered, selected, maximized) but these are not tracked by the back end. If a knode is maximized, and I refresh the browser, then I expect I will just have to find that knode again and maximize it again. Or perhaps it could be kept in a session cookie. Same with knoid states such as zoom/pan position. And tabs and menus too. Even the open knoids and their IDs. If it can be kept in a session cookie, great. If it gets lost, that's fine too.

🎿 Knoids sort of have two states... Sort of an edit mode and a view + interact mode. But really they are stateless and modeless. The EDITING ID just gives access to certain features. Making changes, to be precise. When I only have the viewing ID, I expect that I can still view and copy any part of any knode of any knoid. And I can drill down to any level, and see all the stuff. There are no secrets.

👩‍🏭 P.s., About those INTERACTIONS: when I am building a knoid, and I add an interaction, I expect to be able to USE IT without switching anything. And the same goes for widgets such as the audio, video and animation controls. In fact, I expect to be able to use and enjoy the whole knoid while I have it open under its editing ID. #MODELESS

Likewise, when I have a knoid open under its viewing ID, I would expect to be able to change the way it looks via the view menu. This includes pre-set knoid-wide styles (such as dark mode), fit and flow (gap size, pages), visibility layers (hiding whole columns and rows), export views, sorts and filters,  
(I suppose this all has to be crammed into session cookies? Or else create a phantom clone that gets deleted unless the user clones the current knoid, in which case the phantom clone is saved as a new Knoid under a new ID... hmmmm. That's still a state, isnt it? Anyway, no point in a phantom clone; no real changes have been made. But how to keep it stateless?)

Dev Plan?: Pictorium > Comparium > Categorium 

🏛️. Ultimately, the 4 essential cornerstones of the platform are Clipping, Parsing, Emulation, and Templating. Together these make it possible to find something I like, crop it from the web, the app will emulate its style, and then after I add it to my doc, I can add other things in that same style without having to style them individually.  1.) From the app to the web and back: Crop a portion of any webpage and drop it back in the app. 2.) Emulate: build a reproduction of the cropped bit in pixel perfect HTML and CSS. 3.) Consolidate: take the emulated styles and apply them to a knode. 4.) Template: make it so any similar item dropped into that knode's row or column is recognized as the same and the template applied.  

In the beginning there was the VOID. Everything you see now are PLUGGINS.

The first PLUGGINS are the #WORKSPACE (knoid window), the #EDITSPACE (knode window), #COMMON MENU RIBBON SPACE, and the #TOP MENU (which is empty). Then pluggins are 
    
[/NOTE]

[NOTE]
DEAR KRISTOFF

I do not want to implement a microservices architecture from the beginning. But I do want to anticipate that need from the beginning, and therefore build a monolith that can become distributed. I believe the wisest course is therefore to spend time on API design, and more importantly on an API SPECIFICATION. And in order to arrive at an API SPECIFICATION, I believe diligent effort must be put towards a domain model, or at least finding boundary zones within the intended feature set. (Note that I have not capitalized the phrase "domain model".) Ultimately the system will require to grow into a microservices structure, and to that end I hope to cast my lot with a man named Michael Bryzek. If you know him or his work, excellent! Otherwise, I would like to kindly ask that you view at least this video: https://youtu.be/j6ow-UemzBc

RFP: FEATURE NAMING AND CLASSIFICATION: I need a system for making note of any intended features or functionality. I need to comb through all my notes and identify distinct features, rationally group them. I need a concise way of expressing intention and listing features. 
[/NOTE]
